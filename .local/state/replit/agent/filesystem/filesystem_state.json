{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: Odds Arbitrage Scanner\n\n## Design Approach: Material Design System\n**Rationale:** This is a data-intensive, utility-focused application where efficiency, clarity, and quick decision-making are paramount. Material Design provides excellent patterns for data visualization, tables, and information hierarchyâ€”perfect for displaying real-time odds and arbitrage calculations.\n\n## Core Design Principles\n1. **Data First:** Every design decision prioritizes clarity and scannability of odds data\n2. **Speed to Action:** Users should identify and act on opportunities in seconds\n3. **Visual Hierarchy:** Critical information (profit %, stakes) must stand out immediately\n4. **Consistent Patterns:** Familiar UI allows users to focus on data, not navigation\n\n## Color Palette\n\n**Light Mode:**\n- Primary: 220 80% 45% (Deep blue for trust and professionalism)\n- Success/Positive: 142 70% 45% (Green for profitable arbitrage)\n- Background: 220 15% 98% (Soft neutral background)\n- Surface: 0 0% 100% (Pure white cards)\n- Text Primary: 220 15% 15%\n- Text Secondary: 220 10% 45%\n\n**Dark Mode:**\n- Primary: 220 80% 60% (Brighter blue for contrast)\n- Success/Positive: 142 65% 55% (Vibrant green for profits)\n- Background: 220 15% 10% (Deep dark background)\n- Surface: 220 12% 14% (Elevated dark cards)\n- Text Primary: 220 15% 95%\n- Text Secondary: 220 10% 70%\n\n**Data Visualization Colors:**\n- Profit indicators: Green scale (142 degrees hue)\n- Warning/Low margin: Amber (45 60% 55%)\n- Critical values: Red (0 70% 55%)\n\n## Typography\n- **Primary Font:** Inter (via Google Fonts CDN)\n- **Monospace Font:** JetBrains Mono (for odds/numbers)\n- Headings: Inter Semi-bold (600)\n- Body: Inter Regular (400)\n- Data/Numbers: JetBrains Mono Medium (500)\n- Sizes: text-xs for labels, text-sm for secondary data, text-base for primary content, text-lg for headers, text-2xl for dashboard title\n\n## Layout System\n**Spacing Units:** Use Tailwind units of 2, 4, 6, 8, 12, 16 (e.g., p-4, m-8, gap-6)\n- Card padding: p-6\n- Section spacing: mb-8 or mb-12\n- Grid gaps: gap-4 or gap-6\n- Container max-width: max-w-7xl with px-4 for mobile, px-6 for tablet, px-8 for desktop\n\n## Component Library\n\n**Dashboard Layout:**\n- Top Navigation: Fixed header with logo, refresh button, settings icon, and API status indicator\n- Filters Bar: Sticky below header with sport selector, bookmaker filters, and minimum profit slider\n- Main Content: Grid of arbitrage opportunity cards (grid-cols-1 md:grid-cols-2 lg:grid-cols-3)\n- Empty State: When no opportunities, show centered message with refresh CTA\n\n**Arbitrage Opportunity Cards:**\n- Material Design elevated cards (shadow-md with hover:shadow-lg)\n- Header: Sport icon + match details\n- Odds Display: Two or three column layout showing bookmaker, odds, and stake\n- Profit Badge: Prominent pill badge showing profit percentage (top-right corner)\n- Footer: Timestamp and \"View Details\" link\n- Color coding: Green border-l-4 for high-profit (>3%), amber for medium (1-3%)\n\n**Data Tables (for detailed view):**\n- Striped rows for scannability\n- Sticky header on scroll\n- Monospace font for all numerical data\n- Sort indicators on column headers\n- Highlight row on hover (bg-gray-50 dark:bg-gray-800)\n\n**Settings Page:**\n- Single column form layout (max-w-2xl centered)\n- Material Design text inputs with floating labels\n- API key input with show/hide toggle\n- Mock mode toggle switch with clear explanation\n- Save button (primary color, full-width on mobile)\n\n**Filters & Controls:**\n- Chip-based multi-select for bookmakers (Material Design chips)\n- Dropdown for sport selection\n- Range slider for minimum profit threshold with live value display\n- Clear all filters button (text button, subtle)\n\n**Status Indicators:**\n- API Connection: Green dot for connected, red for disconnected, yellow for cached\n- Real-time indicator: Pulsing green dot when live data is active\n- Loading states: Material Design circular progress spinners\n\n**Empty & Error States:**\n- Centered content with illustrative icon\n- Clear message explaining the state\n- Primary action button to resolve (Refresh, Configure API, etc.)\n\n## Responsive Behavior\n- Mobile (< 768px): Single column cards, collapsible filters in drawer\n- Tablet (768px - 1024px): Two column card grid\n- Desktop (> 1024px): Three column card grid, persistent filter sidebar\n\n## Key UX Patterns\n1. **Quick Scan:** Card-based layout allows rapid visual scanning for profit opportunities\n2. **Progressive Disclosure:** Summary on cards, detailed breakdown on click/expand\n3. **Live Updates:** Subtle animation when new opportunities appear (fade-in)\n4. **Confidence Indicators:** Show data freshness with timestamp and cache status\n5. **Keyboard Shortcuts:** Support for refresh (Cmd/Ctrl+R), settings (Cmd/Ctrl+,)\n\n## Images\n**Hero/Header:** No traditional hero image needed for this utility app. Instead, use a compact branded header with:\n- Logo/app name on left\n- Real-time status indicator in center\n- Settings and refresh controls on right\n- Subtle gradient background (220 80% 45% to 220 80% 35%)\n\n**Icons:** Use Material Icons CDN for:\n- Sport icons (sports_soccer, sports_basketball, sports_tennis)\n- UI controls (refresh, settings, filter_list, trending_up)\n- Status indicators (check_circle, error, cached)\n\n## Animations\n**Minimal, Purposeful Only:**\n- New opportunity cards: Gentle fade-in and slide-up (200ms)\n- Data refresh: Pulse animation on refresh button during fetch\n- Card hover: Subtle elevation change (shadow transition 150ms)\n- NO continuous animations or distracting effects\n\n## Accessibility\n- Maintain 4.5:1 contrast ratio for all text\n- Profit percentages also indicated by color AND position/icon (not color alone)\n- Keyboard navigation support for all interactive elements\n- ARIA labels for icon-only buttons\n- Focus indicators visible in both light and dark modes","size_bytes":5864},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        success: {\n          DEFAULT: \"142 70% 45%\",\n          foreground: \"142 70% 98%\",\n        },\n        warning: {\n          DEFAULT: \"45 60% 55%\",\n          foreground: \"45 60% 98%\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4250},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { createOddsProvider, oddsCache } from \"./odds-provider\";\nimport { findAllArbitrageOpportunities } from \"./arbitrage-engine\";\nimport { \n  getOddsRequestSchema,\n  type Sport,\n  type SportInput,\n  type GetOddsResponse,\n  type HealthCheckResponse \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// SPORT CATEGORY MAPPING\n// ============================================================================\n\n/**\n * Maps general sport categories to their specific league codes\n */\nfunction mapSportInputToLeagues(sportInput: SportInput): Sport[] {\n  const sportMap: Record<string, Sport[]> = {\n    \"soccer\": [\n      \"soccer_epl\",\n      \"soccer_spain_la_liga\",\n      \"soccer_germany_bundesliga\",\n      \"soccer_italy_serie_a\",\n      \"soccer_france_ligue_one\",\n      \"soccer_usa_mls\"\n    ],\n    \"basketball\": [\"basketball_nba\", \"basketball_ncaab\"],\n    \"football\": [\"americanfootball_nfl\", \"americanfootball_ncaaf\"],\n    \"baseball\": [\"baseball_mlb\"],\n    \"hockey\": [\"icehockey_nhl\"],\n    \"mma\": [\"mma_mixed_martial_arts\"],\n  };\n\n  // If it's a general category, return the mapped leagues\n  if (sportInput in sportMap) {\n    return sportMap[sportInput];\n  }\n\n  // If it's \"all\", return ALL available sport leagues\n  if (sportInput === \"all\") {\n    return [\n      \"soccer_epl\", \"soccer_spain_la_liga\", \"soccer_germany_bundesliga\", \n      \"soccer_italy_serie_a\", \"soccer_france_ligue_one\", \"soccer_usa_mls\",\n      \"basketball_nba\", \"basketball_ncaab\",\n      \"americanfootball_nfl\", \"americanfootball_ncaaf\",\n      \"baseball_mlb\",\n      \"icehockey_nhl\",\n      \"mma_mixed_martial_arts\"\n    ];\n  }\n  \n  // If it's \"upcoming\", return upcoming\n  if (sportInput === \"upcoming\") {\n    return [\"upcoming\"];\n  }\n\n  // Otherwise it's already a specific league code, return as-is\n  return [sportInput as Sport];\n}\n\n// ============================================================================\n// API ROUTES FOR ARBITRAGE SCANNER\n// ============================================================================\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // ========================================\n  // GET /api/odds - Fetch arbitrage opportunities\n  // ========================================\n  app.get(\"/api/odds\", async (req, res) => {\n    try {\n      // Parse and validate query parameters\n      const queryParams = {\n        sports: req.query.sports \n          ? (typeof req.query.sports === 'string' ? req.query.sports.split(',') : req.query.sports)\n          : undefined,\n        minProfit: req.query.minProfit ? parseFloat(req.query.minProfit as string) : 0,\n        bookmakers: req.query.bookmakers\n          ? (typeof req.query.bookmakers === 'string' ? req.query.bookmakers.split(',') : req.query.bookmakers)\n          : undefined,\n      };\n\n      // Validate with Zod\n      const validated = getOddsRequestSchema.parse(queryParams);\n\n      // Get settings to determine mock mode\n      const settings = await storage.getSettings();\n      \n      // Get API key from environment or request header\n      const envApiKey = process.env.ODDS_API_KEY;\n      const headerApiKey = req.headers['x-api-key'] as string | undefined;\n      const apiKey = envApiKey || headerApiKey || undefined;\n      \n      console.log(`[API] API Key source: ${envApiKey ? 'environment' : headerApiKey ? 'header' : 'none'}`);\n      console.log(`[API] Mock mode: ${settings.mockMode}`);\n      \n      // Create odds provider (mock or real)\n      const provider = createOddsProvider(apiKey, settings.mockMode);\n      \n      console.log(`[API] Fetching odds using ${provider.getName()}`);\n      \n      // Map general sport categories to specific leagues\n      const sportInputs = validated.sports || [\"upcoming\"];\n      const sports = sportInputs.flatMap(mapSportInputToLeagues);\n      \n      // Remove duplicates\n      const uniqueSports = Array.from(new Set(sports)) as Sport[];\n      \n      // Log which sports are being fetched for debugging\n      console.log(`[API] Fetching odds for sports:`, uniqueSports);\n      \n      // Fetch odds from provider\n      const oddsResult = await provider.fetchOdds(uniqueSports);\n      \n      // Calculate arbitrage opportunities\n      const opportunities = findAllArbitrageOpportunities(\n        oddsResult.events,\n        validated.minProfit || 0\n      );\n\n      // Filter by bookmakers if specified\n      let filteredOpportunities = opportunities;\n      if (validated.bookmakers && validated.bookmakers.length > 0) {\n        filteredOpportunities = opportunities.filter(opp => \n          opp.bookmakers.some(b => validated.bookmakers!.includes(b.name))\n        );\n      }\n\n      // Cache opportunities in storage\n      await storage.setCachedOpportunities(filteredOpportunities);\n\n      const response: GetOddsResponse = {\n        opportunities: filteredOpportunities,\n        count: filteredOpportunities.length,\n        cachedAt: new Date().toISOString(),\n        isFromCache: oddsResult.isFromCache,\n        cacheAge: oddsResult.cacheAge,\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"[API] Error in /api/odds:\", error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: \"Invalid request parameters\",\n          errors: error.errors,\n        });\n      }\n      \n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Internal server error\",\n      });\n    }\n  });\n\n  // ========================================\n  // GET /healthz - Health check (spec requirement)\n  // ========================================\n  app.get(\"/healthz\", async (req, res) => {\n    try {\n      const cacheStats = oddsCache.getStats();\n      \n      const response: HealthCheckResponse = {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          api: true,\n          cache: cacheStats.activeEntries >= 0,\n        },\n      };\n\n      res.json(response);\n    } catch (error) {\n      const response: HealthCheckResponse = {\n        status: \"unhealthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          api: false,\n          cache: false,\n        },\n      };\n\n      res.status(503).json(response);\n    }\n  });\n\n  // ========================================\n  // GET /api/healthz - Health check (alias)\n  // ========================================\n  app.get(\"/api/healthz\", async (req, res) => {\n    try {\n      const cacheStats = oddsCache.getStats();\n      \n      const response: HealthCheckResponse = {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          api: true,\n          cache: cacheStats.activeEntries >= 0,\n        },\n      };\n\n      res.json(response);\n    } catch (error) {\n      const response: HealthCheckResponse = {\n        status: \"unhealthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          api: false,\n          cache: false,\n        },\n      };\n\n      res.status(503).json(response);\n    }\n  });\n\n  // ========================================\n  // GET /api/settings - Get current settings\n  // ========================================\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Internal server error\",\n      });\n    }\n  });\n\n  // ========================================\n  // POST /api/settings - Update settings\n  // ========================================\n  app.post(\"/api/settings\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const settings = await storage.updateSettings(updates);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Internal server error\",\n      });\n    }\n  });\n\n  // ========================================\n  // GET /api/cache/stats - Cache statistics\n  // ========================================\n  app.get(\"/api/cache/stats\", (req, res) => {\n    try {\n      const stats = oddsCache.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Internal server error\",\n      });\n    }\n  });\n\n  // ========================================\n  // POST /api/cache/clear - Clear cache\n  // ========================================\n  app.post(\"/api/cache/clear\", (req, res) => {\n    try {\n      oddsCache.clear();\n      res.json({ message: \"Cache cleared successfully\" });\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Internal server error\",\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9013},"server/storage.ts":{"content":"import type { ArbitrageOpportunity, Settings } from \"@shared/schema\";\n\n// ============================================================================\n// IN-MEMORY STORAGE INTERFACE\n// ============================================================================\n// For arbitrage scanner, we primarily rely on real-time calculations\n// Storage is minimal - just for caching opportunities and settings\n\nexport interface IStorage {\n  // Settings management\n  getSettings(): Promise<Settings>;\n  updateSettings(settings: Partial<Settings>): Promise<Settings>;\n  \n  // Opportunities cache (optional, mainly for performance)\n  getCachedOpportunities(): Promise<ArbitrageOpportunity[]>;\n  setCachedOpportunities(opportunities: ArbitrageOpportunity[]): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private settings: Settings;\n  private cachedOpportunities: ArbitrageOpportunity[];\n\n  constructor() {\n    this.settings = {\n      mockMode: process.env.MOCK_ODDS === \"true\",\n      cacheTimeout: 60,\n      autoRefreshInterval: 30,\n    };\n    this.cachedOpportunities = [];\n  }\n\n  async getSettings(): Promise<Settings> {\n    return { ...this.settings };\n  }\n\n  async updateSettings(updates: Partial<Settings>): Promise<Settings> {\n    this.settings = { ...this.settings, ...updates };\n    return this.getSettings();\n  }\n\n  async getCachedOpportunities(): Promise<ArbitrageOpportunity[]> {\n    return [...this.cachedOpportunities];\n  }\n\n  async setCachedOpportunities(opportunities: ArbitrageOpportunity[]): Promise<void> {\n    this.cachedOpportunities = opportunities;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1626},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// ============================================================================\n// CORE TYPES & SCHEMAS FOR ARBITRAGE SCANNER\n// ============================================================================\n\n// Bookmaker odds for a specific outcome\nexport const bookmakerOddsSchema = z.object({\n  name: z.string(),\n  outcome: z.string(),\n  odds: z.number().positive(),\n  stake: z.number().nonnegative(),\n  ev: z.number().optional(),\n  evDollars: z.number().optional(),\n});\n\nexport type BookmakerOdds = z.infer<typeof bookmakerOddsSchema>;\n\n// Arbitrage opportunity\nexport const arbitrageOpportunitySchema = z.object({\n  id: z.string(),\n  sport: z.string(),\n  match: z.string(),\n  bookmakers: z.array(bookmakerOddsSchema).min(2),\n  profit: z.number(),\n  timestamp: z.string(),\n  eventId: z.string().optional(),\n  commenceTime: z.string().optional(),\n});\n\nexport type ArbitrageOpportunity = z.infer<typeof arbitrageOpportunitySchema>;\n\n// The Odds API raw response types\nexport const oddsApiOutcomeSchema = z.object({\n  name: z.string(),\n  price: z.number(),\n});\n\nexport const oddsApiBookmakerSchema = z.object({\n  key: z.string(),\n  title: z.string(),\n  last_update: z.string(),\n  markets: z.array(z.object({\n    key: z.string(),\n    last_update: z.string(),\n    outcomes: z.array(oddsApiOutcomeSchema),\n  })),\n});\n\nexport const oddsApiEventSchema = z.object({\n  id: z.string(),\n  sport_key: z.string(),\n  sport_title: z.string(),\n  commence_time: z.string(),\n  home_team: z.string(),\n  away_team: z.string(),\n  bookmakers: z.array(oddsApiBookmakerSchema),\n});\n\nexport type OddsApiEvent = z.infer<typeof oddsApiEventSchema>;\nexport type OddsApiBookmaker = z.infer<typeof oddsApiBookmakerSchema>;\nexport type OddsApiOutcome = z.infer<typeof oddsApiOutcomeSchema>;\n\n// Sports configuration\n// 'upcoming' is always valid and returns next 8 games + live games across all sports\nexport const sportSchema = z.enum([\n  \"upcoming\",\n  \"americanfootball_nfl\",\n  \"americanfootball_ncaaf\",\n  \"basketball_nba\",\n  \"basketball_ncaab\",\n  \"baseball_mlb\",\n  \"icehockey_nhl\",\n  \"soccer_epl\",\n  \"soccer_spain_la_liga\", \n  \"soccer_germany_bundesliga\",\n  \"soccer_italy_serie_a\",\n  \"soccer_france_ligue_one\",\n  \"soccer_usa_mls\",\n  \"tennis_atp\",\n  \"tennis_wta\",\n  \"mma_mixed_martial_arts\",\n  \"aussierules_afl\",\n  \"rugbyleague_nrl\",\n]);\n\nexport type Sport = z.infer<typeof sportSchema>;\n\n// General sport categories for user-friendly filters (mapped to specific leagues in routes)\nexport const generalSportSchema = z.enum([\n  \"all\",\n  \"soccer\",\n  \"basketball\",\n  \"football\",\n  \"baseball\",\n  \"hockey\",\n  \"mma\",\n]);\n\nexport type GeneralSport = z.infer<typeof generalSportSchema>;\n\n// Flexible sport input that accepts both general categories and specific league codes\nexport const sportInputSchema = z.union([sportSchema, generalSportSchema]);\nexport type SportInput = z.infer<typeof sportInputSchema>;\n\n// Market types\nexport const marketTypeSchema = z.enum([\"h2h\", \"spreads\", \"totals\"]);\nexport type MarketType = z.infer<typeof marketTypeSchema>;\n\n// API request/response schemas\nexport const getOddsRequestSchema = z.object({\n  sports: z.array(sportInputSchema).optional(),\n  minProfit: z.number().min(0).max(100).optional(),\n  bookmakers: z.array(z.string()).optional(),\n});\n\nexport type GetOddsRequest = z.infer<typeof getOddsRequestSchema>;\n\nexport const getOddsResponseSchema = z.object({\n  opportunities: z.array(arbitrageOpportunitySchema),\n  count: z.number(),\n  cachedAt: z.string().optional(),\n  isFromCache: z.boolean().optional(),\n  cacheAge: z.number().optional(), // Age in minutes\n});\n\nexport type GetOddsResponse = z.infer<typeof getOddsResponseSchema>;\n\n// Health check response\nexport const healthCheckResponseSchema = z.object({\n  status: z.enum([\"healthy\", \"degraded\", \"unhealthy\"]),\n  timestamp: z.string(),\n  services: z.object({\n    api: z.boolean(),\n    cache: z.boolean(),\n  }),\n});\n\nexport type HealthCheckResponse = z.infer<typeof healthCheckResponseSchema>;\n\n// Settings/Configuration\nexport const settingsSchema = z.object({\n  apiKey: z.string().optional(),\n  mockMode: z.boolean().default(false),\n  cacheTimeout: z.number().min(10).max(300).default(60),\n  autoRefreshInterval: z.number().min(10).max(300).default(30),\n  sports: z.array(sportSchema).optional(),\n});\n\nexport type Settings = z.infer<typeof settingsSchema>;\n","size_bytes":4350},"client/src/App.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport SettingsDialog from \"@/components/SettingsDialog\";\nimport type { BookmakerWithCount } from \"@/components/FilterBar\";\nimport type { ArbitrageOpportunity } from \"@/components/ArbitrageCard\";\n\ninterface GetOddsResponse {\n  opportunities: ArbitrageOpportunity[];\n  count: number;\n  cachedAt?: string;\n  isFromCache?: boolean;\n  cacheAge?: number;\n}\n\nfunction DashboardWrapper() {\n  const [selectedSport, setSelectedSport] = useState(\"all\");\n  const [selectedBookmakers, setSelectedBookmakers] = useState<string[]>([]);\n  const [minProfit, setMinProfit] = useState(0);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const buildQueryUrl = () => {\n    const params = new URLSearchParams();\n    params.append(\"sports\", selectedSport);\n    \n    if (minProfit > 0) {\n      params.append(\"minProfit\", minProfit.toString());\n    }\n    \n    if (selectedBookmakers.length > 0) {\n      params.append(\"bookmakers\", selectedBookmakers.join(\",\"));\n    }\n    \n    const queryString = params.toString();\n    return `/api/odds${queryString ? `?${queryString}` : \"\"}`;\n  };\n\n  const { data } = useQuery<GetOddsResponse>({\n    queryKey: [buildQueryUrl()],\n    queryFn: async () => {\n      const apiKey = localStorage.getItem(\"oddsApiKey\") || \"\";\n      \n      const headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\",\n      };\n      \n      if (apiKey.trim()) {\n        headers[\"x-api-key\"] = apiKey;\n      }\n      \n      const response = await fetch(buildQueryUrl(), { headers });\n      if (!response.ok) {\n        try {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        } catch {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      return response.json();\n    },\n    refetchInterval: 30000,\n    staleTime: 30000,\n  });\n\n  const availableBookmakers = useMemo<BookmakerWithCount[]>(() => {\n    if (!data?.opportunities || data.opportunities.length === 0) {\n      return [];\n    }\n\n    const bookmakerCounts = new Map<string, number>();\n    \n    data.opportunities.forEach(opp => {\n      opp.bookmakers.forEach(b => {\n        bookmakerCounts.set(b.name, (bookmakerCounts.get(b.name) || 0) + 1);\n      });\n    });\n\n    const bookmakersWithCounts: BookmakerWithCount[] = Array.from(bookmakerCounts.entries())\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n\n    return bookmakersWithCounts.slice(0, 15);\n  }, [data?.opportunities]);\n\n  const handleBookmakerToggle = (bookmaker: string) => {\n    setSelectedBookmakers((prev) =>\n      prev.includes(bookmaker)\n        ? prev.filter((b) => b !== bookmaker)\n        : [...prev, bookmaker]\n    );\n  };\n\n  const handleClearFilters = () => {\n    setSelectedSport(\"all\");\n    setSelectedBookmakers([]);\n    setMinProfit(0);\n  };\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          selectedSport={selectedSport}\n          selectedBookmakers={selectedBookmakers}\n          minProfit={minProfit}\n          availableBookmakers={availableBookmakers}\n          onSportChange={setSelectedSport}\n          onBookmakerToggle={handleBookmakerToggle}\n          onMinProfitChange={setMinProfit}\n          onClearFilters={handleClearFilters}\n          onSettingsClick={() => setSettingsOpen(true)}\n        />\n        <div className=\"flex flex-col flex-1 min-w-0\">\n          <div className=\"sticky top-0 z-40 border-b border-border bg-background/95 backdrop-blur px-4 py-2\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n          </div>\n          <Dashboard\n            selectedSport={selectedSport}\n            selectedBookmakers={selectedBookmakers}\n            minProfit={minProfit}\n            availableBookmakers={availableBookmakers}\n            onSportChange={setSelectedSport}\n            onBookmakerToggle={handleBookmakerToggle}\n            onMinProfitChange={setMinProfit}\n            onClearFilters={handleClearFilters}\n            onSettingsClick={() => setSettingsOpen(true)}\n          />\n        </div>\n      </div>\n      <SettingsDialog open={settingsOpen} onOpenChange={setSettingsOpen} />\n    </SidebarProvider>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardWrapper} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5434},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 18% 97%;\n\n  --foreground: 220 20% 12%;\n\n  --border: 220 15% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 20% 12%;\n\n  --card-border: 220 12% 90%;\n\n  --sidebar: 220 15% 95%;\n\n  --sidebar-foreground: 220 20% 12%;\n\n  --sidebar-border: 220 12% 88%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 18% 90%;\n\n  --sidebar-accent-foreground: 220 20% 15%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 12% 95%;\n\n  --popover-foreground: 220 20% 12%;\n\n  --popover-border: 220 12% 86%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 18% 92%;\n\n  --secondary-foreground: 220 20% 15%;\n\n  --muted: 220 15% 94%;\n\n  --muted-foreground: 220 12% 48%;\n\n  --accent: 217 91% 95%;\n\n  --accent-foreground: 217 91% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --success: 142 76% 45%;\n  --success-foreground: 0 0% 100%;\n\n  --warning: 38 92% 50%;\n  --warning-foreground: 38 92% 8%;\n\n  --input: 220 15% 75%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 15 80% 55%;\n  \n  --profit-high: 142 76% 45%;\n  --profit-high-bg: 142 76% 96%;\n  --profit-medium: 38 92% 50%;\n  --profit-medium-bg: 38 92% 96%;\n  --profit-low: 220 12% 48%;\n  --profit-low-bg: 220 15% 94%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.10);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.10);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.10), 0px 2px 4px -2px hsl(220 15% 15% / 0.10);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.12), 0px 3px 6px -3px hsl(220 15% 15% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 15% / 0.15), 0px 4px 8px -4px hsl(220 15% 15% / 0.10);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 15% 15% / 0.18), 0px 8px 12px -6px hsl(220 15% 15% / 0.12);\n  --shadow-2xl: 0px 30px 50px -12px hsl(220 15% 15% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 84% 5%;\n\n  --foreground: 210 100% 98%;\n\n  --border: 217 45% 12%;\n\n  --card: 222 50% 8%;\n\n  --card-foreground: 210 100% 98%;\n\n  --card-border: 217 45% 14%;\n\n  --sidebar: 222 84% 6%;\n\n  --sidebar-foreground: 210 100% 98%;\n\n  --sidebar-border: 217 45% 10%;\n\n  --sidebar-primary: 188 95% 55%;\n\n  --sidebar-primary-foreground: 222 84% 5%;\n\n  --sidebar-accent: 217 45% 12%;\n\n  --sidebar-accent-foreground: 210 90% 94%;\n\n  --sidebar-ring: 188 95% 55%;\n\n  --popover: 222 50% 7%;\n\n  --popover-foreground: 210 100% 98%;\n\n  --popover-border: 217 45% 12%;\n\n  --primary: 188 95% 55%;\n\n  --primary-foreground: 222 84% 5%;\n\n  --secondary: 217 45% 14%;\n\n  --secondary-foreground: 210 90% 96%;\n\n  --muted: 217 45% 12%;\n\n  --muted-foreground: 215 30% 60%;\n\n  --accent: 268 85% 65%;\n\n  --accent-foreground: 210 100% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 100% 98%;\n\n  --success: 158 88% 50%;\n  --success-foreground: 222 84% 5%;\n\n  --warning: 38 95% 60%;\n  --warning-foreground: 222 84% 5%;\n\n  --input: 217 45% 18%;\n  --ring: 188 95% 55%;\n  --chart-1: 188 95% 55%;\n  --chart-2: 158 88% 50%;\n  --chart-3: 268 85% 65%;\n  --chart-4: 38 95% 60%;\n  --chart-5: 15 85% 55%;\n  \n  --profit-high: 158 88% 50%;\n  --profit-high-bg: 158 88% 12%;\n  --profit-medium: 38 95% 60%;\n  --profit-medium-bg: 38 95% 14%;\n  --profit-low: 215 30% 60%;\n  --profit-low-bg: 217 45% 12%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 5% / 0.35), 0px 1px 2px -1px hsl(220 15% 5% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 5% / 0.40), 0px 2px 4px -2px hsl(220 15% 5% / 0.40);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 5% / 0.45), 0px 3px 6px -3px hsl(220 15% 5% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 5% / 0.50), 0px 4px 8px -4px hsl(220 15% 5% / 0.40);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 15% 5% / 0.55), 0px 8px 12px -6px hsl(220 15% 5% / 0.45);\n  --shadow-2xl: 0px 30px 50px -12px hsl(220 15% 5% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    :focus-visible {\n      @apply transition-all duration-200;\n    }\n  }\n\n  @supports selector(:focus-visible) {\n    *:focus {\n      outline: none;\n    }\n    \n    *:focus-visible {\n      @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n    }\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Force 44px touch targets for Shadcn components */\n  \n  /* Switch component - ensure 44px minimum touch area with proper thumb positioning */\n  [role=\"switch\"] {\n    @apply !h-11 !w-20;\n  }\n  \n  [role=\"switch\"] > span {\n    @apply !h-9 !w-9;\n  }\n  \n  [role=\"switch\"][data-state=\"checked\"] > span {\n    @apply !translate-x-9;\n  }\n  \n  /* Slider component - ensure 44px thumb */\n  [role=\"slider\"] {\n    @apply !h-11 !w-11;\n  }\n  \n  /* Select trigger and items - ensure 44px height */\n  [data-testid=\"select-sport\"] {\n    @apply !min-h-11;\n  }\n  \n  /* Select items */\n  [role=\"option\"] {\n    @apply !min-h-11;\n  }\n}","size_bytes":11461},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ArbitrageCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  TrendingUp, \n  Circle as CircleIcon,\n  Trophy,\n  Dumbbell,\n  Snowflake,\n  Shield,\n  CircleDot,\n  Clock,\n  ArrowRight,\n  DollarSign,\n  Zap,\n  Target,\n  Percent\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ArbitrageOpportunity {\n  id: string;\n  sport: string;\n  match: string;\n  bookmakers: {\n    name: string;\n    outcome: string;\n    odds: number;\n    stake: number;\n  }[];\n  profit: number;\n  timestamp: string;\n}\n\ninterface ArbitrageCardProps {\n  opportunity: ArbitrageOpportunity;\n  onClick?: () => void;\n}\n\nexport default function ArbitrageCard({ opportunity, onClick }: ArbitrageCardProps) {\n  const profitLevel = opportunity.profit >= 3 ? \"high\" : opportunity.profit >= 1 ? \"medium\" : \"low\";\n  \n  const getSportIcon = (sport: string) => {\n    const sportLower = sport.toLowerCase();\n    if (sportLower.includes('basketball')) return CircleDot;\n    if (sportLower.includes('soccer') || sportLower.includes('football')) return CircleIcon;\n    if (sportLower.includes('baseball')) return CircleIcon;\n    if (sportLower.includes('hockey')) return Snowflake;\n    if (sportLower.includes('mma')) return Dumbbell;\n    return Trophy;\n  };\n\n  const SportIcon = getSportIcon(opportunity.sport);\n\n  const getProfitLabel = () => {\n    if (profitLevel === \"high\") return \"High profit opportunity\";\n    if (profitLevel === \"medium\") return \"Medium profit opportunity\";\n    return \"Low profit opportunity\";\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      onClick?.();\n    }\n  };\n\n  const timeAgo = () => {\n    const now = new Date();\n    const timestamp = new Date(opportunity.timestamp);\n    const seconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);\n    \n    if (seconds < 60) return `${seconds}s ago`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n    return timestamp.toLocaleTimeString();\n  };\n\n  const totalStake = opportunity.bookmakers.reduce((sum, b) => sum + b.stake, 0);\n  const guaranteedProfit = (totalStake * opportunity.profit) / 100;\n\n  const profitGradientClass = \n    profitLevel === \"high\"\n      ? \"from-emerald-500/20 via-emerald-500/10 to-transparent\"\n      : profitLevel === \"medium\"\n      ? \"from-amber-500/20 via-amber-500/10 to-transparent\"\n      : \"from-muted/50 via-muted/25 to-transparent\";\n\n  const profitBgClass = \n    profitLevel === \"high\"\n      ? \"bg-emerald-500/10 dark:bg-emerald-500/15 border-emerald-500/30\"\n      : profitLevel === \"medium\"\n      ? \"bg-amber-500/10 dark:bg-amber-500/15 border-amber-500/30\"\n      : \"bg-muted/40 dark:bg-muted/30 border-border/50\";\n\n  const profitTextClass =\n    profitLevel === \"high\"\n      ? \"text-emerald-600 dark:text-emerald-400\"\n      : profitLevel === \"medium\"\n      ? \"text-amber-600 dark:text-amber-400\"\n      : \"text-muted-foreground\";\n\n  const profitIconClass =\n    profitLevel === \"high\"\n      ? \"text-emerald-500 dark:text-emerald-400\"\n      : profitLevel === \"medium\"\n      ? \"text-amber-500 dark:text-amber-400\"\n      : \"text-muted-foreground\";\n\n  return (\n    <Card\n      className={cn(\n        \"group relative overflow-hidden hover-elevate active-elevate-2 cursor-pointer transition-all duration-300\",\n        \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        \"border-2 border-card-border hover:border-primary/30\"\n      )}\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role=\"article\"\n      aria-label={`${opportunity.match}, ${opportunity.profit.toFixed(2)}% profit, ${getProfitLabel()}`}\n      data-testid={`card-opportunity-${opportunity.id}`}\n    >\n      {/* Gradient Background */}\n      <div \n        className={cn(\n          \"absolute inset-0 bg-gradient-to-br opacity-40 dark:opacity-30 transition-opacity duration-300 group-hover:opacity-60\",\n          profitGradientClass\n        )} \n        aria-hidden=\"true\"\n      />\n\n      <CardHeader className=\"relative pb-4 sm:pb-5 space-y-3 sm:space-y-5 p-4 sm:p-6\">\n        {/* Header Section */}\n        <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 sm:gap-4\">\n          <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n            <div className={cn(\n              \"mt-0.5 sm:mt-1 p-2 sm:p-2.5 rounded-lg sm:rounded-xl shrink-0 transition-all duration-300\",\n              \"bg-primary/10 dark:bg-primary/15 group-hover:bg-primary/20 dark:group-hover:bg-primary/25\",\n              \"group-hover:scale-110\"\n            )}>\n              <SportIcon className=\"h-4 w-4 sm:h-5 sm:w-5 text-primary\" aria-hidden=\"true\" />\n            </div>\n            <div className=\"flex-1 min-w-0 space-y-1 sm:space-y-2\">\n              <h3 className=\"font-bold text-base sm:text-lg leading-tight tracking-tight\" data-testid=\"text-match\">\n                {opportunity.match}\n              </h3>\n              <p className=\"text-xs sm:text-sm text-muted-foreground font-semibold\">{opportunity.sport}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2 shrink-0 self-start sm:self-auto\">\n            <Clock className=\"h-3 w-3 sm:h-3.5 sm:w-3.5 text-muted-foreground\" aria-hidden=\"true\" />\n            <span className=\"text-xs text-muted-foreground font-medium tabular-nums\" data-testid=\"text-timestamp\">\n              {timeAgo()}\n            </span>\n          </div>\n        </div>\n\n        {/* Profit Section - Responsive Layout */}\n        <div className={cn(\n          \"relative rounded-xl sm:rounded-2xl p-3 sm:p-5 border-2 transition-all duration-300\",\n          profitBgClass,\n          \"group-hover:shadow-lg\"\n        )}>\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"space-y-1\">\n              <p className=\"text-[10px] sm:text-xs uppercase tracking-wider text-muted-foreground font-bold flex items-center gap-1 sm:gap-1.5\">\n                <Zap className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                Guaranteed Return\n              </p>\n              <div className=\"flex items-baseline gap-2 sm:gap-3\">\n                <p className={cn(\n                  \"text-3xl sm:text-4xl font-black tabular-nums tracking-tight\",\n                  profitTextClass\n                )} data-testid=\"text-profit\">\n                  {opportunity.profit.toFixed(2)}%\n                </p>\n                <TrendingUp className={cn(\"h-5 w-5 sm:h-6 sm:w-6\", profitIconClass)} aria-hidden=\"true\" />\n              </div>\n            </div>\n            \n            <div className=\"flex items-baseline justify-between gap-4\">\n              <div className=\"space-y-1\">\n                <p className=\"text-[10px] sm:text-xs uppercase tracking-wider text-muted-foreground font-bold flex items-center gap-1 sm:gap-1.5\">\n                  <DollarSign className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                  Profit\n                </p>\n                <p className={cn(\n                  \"text-2xl sm:text-3xl font-bold tabular-nums\",\n                  profitTextClass\n                )} data-testid=\"text-profit-amount\">\n                  ${guaranteedProfit.toFixed(2)}\n                </p>\n              </div>\n              <div className=\"text-right space-y-1\">\n                <p className=\"text-[10px] sm:text-xs uppercase tracking-wider text-muted-foreground font-bold\">\n                  Total Stake\n                </p>\n                <p className=\"text-base sm:text-lg font-bold tabular-nums text-muted-foreground\">\n                  ${totalStake.toFixed(2)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"relative pt-0 pb-4 sm:pb-6 px-4 sm:px-6 space-y-3 sm:space-y-4\">\n        {/* Bookmaker Bets */}\n        <div className=\"space-y-2 sm:space-y-3\">\n          <h4 className=\"text-[10px] sm:text-xs uppercase tracking-wider text-muted-foreground font-bold flex items-center gap-1 sm:gap-1.5 px-1\">\n            <Target className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n            Betting Strategy\n          </h4>\n          <div className=\"space-y-2\">\n            {opportunity.bookmakers.map((bookmaker, idx) => (\n              <div\n                key={idx}\n                className={cn(\n                  \"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-4\",\n                  \"p-3 sm:p-4 rounded-lg sm:rounded-xl\",\n                  \"bg-card/50 dark:bg-card/30 border border-border/50\",\n                  \"transition-all duration-200 hover-elevate\"\n                )}\n                data-testid={`bookmaker-bet-${idx}`}\n              >\n                <div className=\"flex items-center gap-2 sm:gap-3 flex-1 min-w-0\">\n                  <Badge variant=\"outline\" className=\"shrink-0 font-semibold text-[10px] sm:text-xs px-2 sm:px-3 py-0.5 sm:py-1\">\n                    {bookmaker.name}\n                  </Badge>\n                  <span className=\"font-semibold text-xs sm:text-sm truncate\" data-testid=\"text-outcome\">\n                    {bookmaker.outcome}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center gap-3 sm:gap-6 shrink-0 justify-between sm:justify-end\">\n                  <div className=\"text-left sm:text-right\">\n                    <p className=\"text-[10px] sm:text-xs text-muted-foreground uppercase tracking-wider font-bold\">Odds</p>\n                    <p className=\"text-sm sm:text-base font-bold tabular-nums\" data-testid=\"text-odds\">\n                      {bookmaker.odds.toFixed(2)}\n                    </p>\n                  </div>\n                  \n                  <ArrowRight className=\"hidden sm:block h-4 w-4 text-muted-foreground\" aria-hidden=\"true\" />\n                  \n                  <div className=\"text-left sm:text-right\">\n                    <p className=\"text-[10px] sm:text-xs text-muted-foreground uppercase tracking-wider font-bold\">Stake</p>\n                    <p className=\"text-sm sm:text-base font-bold tabular-nums\" data-testid=\"text-stake\">\n                      ${bookmaker.stake.toFixed(2)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Action Indicator */}\n        <div className=\"flex items-center justify-center pt-1 sm:pt-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"gap-2 text-xs sm:text-sm font-semibold group/btn w-full sm:w-auto\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onClick?.();\n            }}\n          >\n            View Full Details\n            <ArrowRight className=\"h-3 w-3 sm:h-4 sm:w-4 transition-transform group-hover/btn:translate-x-1\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10993},"client/src/components/DashboardHeader.tsx":{"content":"import { useEffect } from \"react\";\nimport { RefreshCw, Settings, TrendingUp, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DashboardHeaderProps {\n  status: \"connected\" | \"disconnected\" | \"cached\";\n  onRefresh: () => void;\n  onSettingsClick: () => void;\n  isRefreshing?: boolean;\n}\n\nexport default function DashboardHeader({\n  status,\n  onRefresh,\n  onSettingsClick,\n  isRefreshing = false,\n}: DashboardHeaderProps) {\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'r') {\n        e.preventDefault();\n        onRefresh();\n      } else if ((e.metaKey || e.ctrlKey) && e.key === ',') {\n        e.preventDefault();\n        onSettingsClick();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onRefresh, onSettingsClick]);\n\n  return (\n    <header \n      className={cn(\n        \"sticky top-0 z-50 border-b border-border/50\",\n        \"bg-background/80 backdrop-blur-xl supports-[backdrop-filter]:bg-background/60\",\n        \"shadow-sm\"\n      )}\n      role=\"banner\"\n    >\n      {/* Gradient overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-primary/5 pointer-events-none\" aria-hidden=\"true\" />\n      \n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n        <div className=\"flex h-16 items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className={cn(\n                \"relative bg-gradient-to-br from-primary to-primary/80 p-2 rounded-lg\",\n                \"shadow-lg shadow-primary/20\"\n              )}>\n                <TrendingUp className=\"h-5 w-5 text-primary-foreground\" aria-hidden=\"true\" />\n                <Sparkles className=\"absolute -top-0.5 -right-0.5 h-3 w-3 text-primary-foreground animate-pulse\" aria-hidden=\"true\" />\n              </div>\n              <div className=\"flex flex-col\">\n                <h1 className=\"text-xl sm:text-2xl font-black tracking-tight bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent\" data-testid=\"text-app-title\">\n                  Arbitrage Scanner\n                </h1>\n                <p className=\"text-xs text-muted-foreground font-medium hidden sm:block\">\n                  Find guaranteed profit opportunities\n                </p>\n              </div>\n            </div>\n            <StatusIndicator status={status} className=\"hidden lg:flex\" />\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"default\"\n              onClick={onRefresh}\n              disabled={isRefreshing}\n              data-testid=\"button-refresh\"\n              aria-label={isRefreshing ? \"Refreshing opportunities\" : \"Refresh opportunities (Cmd/Ctrl+R)\"}\n              title={isRefreshing ? \"Refreshing...\" : \"Refresh (Cmd/Ctrl+R)\"}\n              className={cn(\n                \"gap-2 font-semibold\",\n                \"hover:bg-primary/10 dark:hover:bg-primary/20 transition-colors duration-200\"\n              )}\n            >\n              <RefreshCw className={cn(\"h-4 w-4 transition-transform duration-500\", isRefreshing && \"animate-spin\")} />\n              <span className=\"hidden sm:inline\">Refresh</span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onSettingsClick}\n              data-testid=\"button-settings\"\n              aria-label=\"Open settings (Cmd/Ctrl+,)\"\n              title=\"Settings (Cmd/Ctrl+,)\"\n              className=\"hover:bg-primary/10 dark:hover:bg-primary/20\"\n            >\n              <Settings className=\"h-5 w-5\" />\n            </Button>\n            <ThemeToggle />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4101},"client/src/components/EmptyState.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { TrendingUp, RefreshCw, Search, Filter } from \"lucide-react\";\n\ninterface EmptyStateProps {\n  onRefresh: () => void;\n}\n\nexport default function EmptyState({ onRefresh }: EmptyStateProps) {\n  return (\n    <div \n      className=\"flex flex-col items-center justify-center min-h-[500px] text-center px-4\"\n      role=\"status\"\n      aria-live=\"polite\"\n    >\n      <Card className=\"p-12 max-w-2xl mx-auto\">\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <div className=\"rounded-full bg-primary/10 p-8 transition-transform hover:scale-105\" aria-hidden=\"true\">\n                <TrendingUp className=\"h-16 w-16 text-primary\" />\n              </div>\n              <div className=\"absolute -bottom-2 -right-2 bg-background rounded-full p-2 border-2 border-background shadow-lg\">\n                <Search className=\"h-6 w-6 text-muted-foreground\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h2 className=\"text-2xl font-bold\" data-testid=\"text-empty-title\">\n              No Arbitrage Opportunities Found\n            </h2>\n            <p className=\"text-muted-foreground text-base max-w-md mx-auto\" data-testid=\"text-empty-description\">\n              We couldn't find any profitable opportunities matching your current filters. Try adjusting your criteria or refresh to check for new opportunities.\n            </p>\n          </div>\n\n          <div className=\"pt-4 space-y-4\">\n            <Button \n              size=\"lg\"\n              onClick={onRefresh} \n              data-testid=\"button-empty-refresh\"\n              aria-label=\"Refresh to check for new arbitrage opportunities\"\n              className=\"gap-2\"\n            >\n              <RefreshCw className=\"h-5 w-5\" aria-hidden=\"true\" />\n              Refresh Data\n            </Button>\n\n            <div className=\"pt-6 border-t\">\n              <div className=\"flex items-start gap-3 text-sm text-muted-foreground max-w-md mx-auto text-left\">\n                <Filter className=\"h-5 w-5 mt-0.5 shrink-0\" aria-hidden=\"true\" />\n                <div>\n                  <p className=\"font-medium text-foreground mb-1\">Quick Tips:</p>\n                  <ul className=\"space-y-1 text-sm\">\n                    <li>â€¢ Try lowering the minimum profit percentage</li>\n                    <li>â€¢ Select \"All Sports\" to see more opportunities</li>\n                    <li>â€¢ Remove bookmaker filters to expand results</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2766},"client/src/components/FilterBar.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  X, \n  Trophy, \n  Circle, \n  CircleDot,\n  Shield,\n  Snowflake,\n  Filter,\n  TrendingUp,\n  Sparkles,\n  Dumbbell\n} from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\nconst SPORTS = [\n  { value: \"all\", label: \"All Sports\", Icon: Trophy },\n  { value: \"soccer\", label: \"Soccer\", Icon: Circle },\n  { value: \"basketball\", label: \"Basketball\", Icon: CircleDot },\n  { value: \"football\", label: \"Football\", Icon: Shield },\n  { value: \"baseball\", label: \"Baseball\", Icon: Circle },\n  { value: \"hockey\", label: \"Hockey\", Icon: Snowflake },\n  { value: \"mma\", label: \"MMA\", Icon: Dumbbell },\n];\n\nexport interface BookmakerWithCount {\n  name: string;\n  count: number;\n}\n\ninterface FilterBarProps {\n  selectedSport: string;\n  selectedBookmakers: string[];\n  minProfit: number;\n  availableBookmakers: BookmakerWithCount[];\n  onSportChange: (sport: string) => void;\n  onBookmakerToggle: (bookmaker: string) => void;\n  onMinProfitChange: (profit: number) => void;\n  onClearFilters: () => void;\n}\n\nexport default function FilterBar({\n  selectedSport,\n  selectedBookmakers,\n  minProfit,\n  availableBookmakers = [],\n  onSportChange,\n  onBookmakerToggle,\n  onMinProfitChange,\n  onClearFilters,\n}: FilterBarProps) {\n  const hasFilters = selectedSport !== \"all\" || selectedBookmakers.length > 0 || minProfit > 0;\n\n  return (\n    <div className=\"border-b border-border/50 bg-muted/30 dark:bg-muted/10\" role=\"region\" aria-label=\"Filters\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <Card className={cn(\n          \"p-5 space-y-5 border-border/50\",\n          \"bg-card/50 backdrop-blur-sm\"\n        )}>\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className={cn(\n                \"bg-gradient-to-br from-primary/20 to-primary/10 p-2 rounded-lg\",\n                \"ring-1 ring-primary/20\"\n              )}>\n                <Filter className=\"h-4 w-4 text-primary\" aria-hidden=\"true\" />\n              </div>\n              <div>\n                <h2 className=\"text-base font-bold flex items-center gap-2\">\n                  Filter Opportunities\n                  {hasFilters && <Sparkles className=\"h-3.5 w-3.5 text-primary animate-pulse\" aria-hidden=\"true\" />}\n                </h2>\n                <p className=\"text-xs text-muted-foreground font-medium\">\n                  Refine your search to find the best opportunities\n                </p>\n              </div>\n            </div>\n            {hasFilters && (\n              <Button\n                variant=\"outline\"\n                size=\"default\"\n                onClick={onClearFilters}\n                data-testid=\"button-clear-filters\"\n                aria-label=\"Clear all filters\"\n                className={cn(\n                  \"gap-2 font-semibold\",\n                  \"hover:bg-destructive/10 hover:text-destructive hover:border-destructive/30 transition-all duration-200\"\n                )}\n              >\n                <X className=\"h-4 w-4\" aria-hidden=\"true\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-5\">\n            {/* Sport Category */}\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-bold text-foreground flex items-center gap-2 uppercase tracking-wide\">\n                <Trophy className=\"h-4 w-4 text-primary\" aria-hidden=\"true\" />\n                Sport Category\n              </label>\n              <Select value={selectedSport} onValueChange={onSportChange}>\n                <SelectTrigger \n                  className={cn(\n                    \"w-full font-semibold\",\n                    \"hover:bg-muted/50 transition-colors duration-200\"\n                  )} \n                  data-testid=\"select-sport\" \n                  aria-label=\"Select sport to filter\"\n                >\n                  <SelectValue>\n                    {SPORTS.find(s => s.value === selectedSport)?.label || \"All Sports\"}\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  {SPORTS.map((sport) => (\n                    <SelectItem key={sport.value} value={sport.value}>\n                      <div className=\"flex items-center gap-3\">\n                        <sport.Icon className=\"h-4 w-4\" aria-hidden=\"true\" />\n                        <span className=\"font-medium\">{sport.label}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Minimum Profit */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"profit-slider\" className=\"text-xs font-bold text-foreground flex items-center gap-2 uppercase tracking-wide\">\n                  <TrendingUp className=\"h-4 w-4 text-primary\" aria-hidden=\"true\" />\n                  Min Profit\n                </label>\n                <div className={cn(\n                  \"px-3 py-1.5 rounded-lg font-black font-mono tabular-nums text-lg\",\n                  \"bg-primary/10 text-primary ring-1 ring-primary/20\"\n                )} \n                data-testid=\"text-profit-value\" \n                aria-live=\"polite\">\n                  {minProfit.toFixed(1)}%\n                </div>\n              </div>\n              <div className=\"pt-2 space-y-2\">\n                <Slider\n                  id=\"profit-slider\"\n                  value={[minProfit]}\n                  onValueChange={([value]) => onMinProfitChange(value)}\n                  max={10}\n                  step={0.1}\n                  className=\"w-full\"\n                  data-testid=\"slider-min-profit\"\n                  aria-label={`Minimum profit filter, currently ${minProfit.toFixed(1)}%`}\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground font-semibold\">\n                  <span>0%</span>\n                  <span>5%</span>\n                  <span>10%</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Bookmakers Info */}\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-bold text-foreground flex items-center gap-2 uppercase tracking-wide\">\n                <CircleDot className=\"h-4 w-4 text-primary\" aria-hidden=\"true\" />\n                Bookmakers\n              </label>\n              <div className={cn(\n                \"flex items-center justify-center h-11 px-4 rounded-lg\",\n                \"bg-muted/50 border border-border/50\"\n              )}>\n                <span className=\"text-xs font-semibold text-muted-foreground\">\n                  {selectedBookmakers.length > 0 \n                    ? `${selectedBookmakers.length} of ${availableBookmakers.length} selected` \n                    : `All ${availableBookmakers.length} available`}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Bookmakers Grid */}\n          {availableBookmakers.length > 0 && (\n            <div className=\"space-y-2 pt-1\">\n              <div className=\"flex flex-wrap gap-2\" role=\"group\" aria-label=\"Bookmaker filters\">\n                {availableBookmakers.map((bookmaker) => {\n                  const isSelected = selectedBookmakers.includes(bookmaker.name);\n                  return (\n                    <Badge\n                      key={bookmaker.name}\n                      variant={isSelected ? \"default\" : \"outline\"}\n                      className={cn(\n                        \"cursor-pointer transition-all duration-200 px-3 py-1.5 text-xs font-bold\",\n                        isSelected \n                          ? \"shadow-lg shadow-primary/20 ring-1 ring-primary/30\" \n                          : \"hover-elevate hover:border-primary/30\"\n                      )}\n                      onClick={() => onBookmakerToggle(bookmaker.name)}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                          e.preventDefault();\n                          onBookmakerToggle(bookmaker.name);\n                        }\n                      }}\n                      tabIndex={0}\n                      role=\"checkbox\"\n                      aria-checked={isSelected}\n                      aria-label={`Filter by ${bookmaker.name}, ${bookmaker.count} opportunities`}\n                      data-testid={`badge-bookmaker-${bookmaker.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {bookmaker.name}\n                      <span className={cn(\n                        \"ml-2 px-1.5 py-0.5 rounded text-xs font-black\",\n                        isSelected ? \"bg-primary-foreground/20\" : \"bg-muted\"\n                      )}>\n                        {bookmaker.count}\n                      </span>\n                    </Badge>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9419},"client/src/components/SettingsDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface SettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function SettingsDialog({ open, onOpenChange }: SettingsDialogProps) {\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem(\"oddsApiKey\") || \"\");\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [mockMode, setMockMode] = useState(() => localStorage.getItem(\"mockMode\") === \"true\");\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveError, setSaveError] = useState<string | null>(null);\n\n  const handleApiKeyChange = (value: string) => {\n    setApiKey(value);\n    setSaveError(null);\n    if (value.trim().length > 0 && mockMode) {\n      setMockMode(false);\n    }\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    setSaveError(null);\n    \n    try {\n      const response = await fetch(\"/api/settings\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ mockMode }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      \n      localStorage.setItem(\"oddsApiKey\", apiKey);\n      localStorage.setItem(\"mockMode\", mockMode.toString());\n      \n      // Invalidate all odds queries to force immediate refetch with new settings\n      // Use predicate to match any query key that starts with /api/odds\n      await queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/odds');\n        }\n      });\n      \n      setIsSaving(false);\n      onOpenChange(false);\n    } catch (error) {\n      console.error(\"Failed to save settings:\", error);\n      setSaveError(\"Failed to save. Please try again.\");\n      setIsSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setApiKey(localStorage.getItem(\"oddsApiKey\") || \"\");\n    setMockMode(localStorage.getItem(\"mockMode\") === \"true\");\n    setSaveError(null);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-settings\" aria-describedby=\"dialog-description\">\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n          <DialogDescription id=\"dialog-description\">\n            Configure API and data preferences\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"api-key\">Odds API Key</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"api-key\"\n                type={showApiKey ? \"text\" : \"password\"}\n                placeholder=\"Enter your API key\"\n                value={apiKey}\n                onChange={(e) => handleApiKeyChange(e.target.value)}\n                className=\"pr-12 !h-11\"\n                data-testid=\"input-api-key\"\n                aria-label=\"API key\"\n                aria-invalid={!!saveError}\n                autoComplete=\"off\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                className=\"absolute right-0 top-0 !h-11 !w-11 !p-0 hover:bg-transparent\"\n                onClick={() => setShowApiKey(!showApiKey)}\n                data-testid=\"button-toggle-api-key\"\n                aria-label={showApiKey ? \"Hide API key\" : \"Show API key\"}\n              >\n                {showApiKey ? (\n                  <EyeOff className=\"h-4 w-4\" aria-hidden=\"true\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" aria-hidden=\"true\" />\n                )}\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Get your key from{\" \"}\n              <a\n                href=\"https://the-odds-api.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-primary hover:underline focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded\"\n              >\n                the-odds-api.com\n              </a>\n            </p>\n          </div>\n\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"space-y-0.5 flex-1\">\n              <Label htmlFor=\"mock-mode\">Mock Data Mode</Label>\n              <p className=\"text-xs text-muted-foreground\">\n                {mockMode \n                  ? \"Using simulated data\"\n                  : apiKey.trim()\n                    ? \"Using live data\"\n                    : \"Add API key for live data\"}\n              </p>\n            </div>\n            <Switch\n              id=\"mock-mode\"\n              checked={mockMode}\n              onCheckedChange={setMockMode}\n              data-testid=\"switch-mock-mode\"\n              aria-label=\"Toggle mock data mode\"\n            />\n          </div>\n\n          {saveError && (\n            <div className=\"p-3 rounded-md bg-destructive/10 border border-destructive/20\" role=\"alert\">\n              <p className=\"text-sm text-destructive\">{saveError}</p>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleCancel} \n            data-testid=\"button-cancel\"\n            disabled={isSaving}\n            className=\"h-11 px-6\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSave} \n            data-testid=\"button-save\"\n            disabled={isSaving}\n            aria-label={isSaving ? \"Saving settings\" : \"Save settings\"}\n            className=\"h-11 px-6\"\n          >\n            {isSaving ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6283},"client/src/components/StatusIndicator.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Wifi, WifiOff, Database } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype StatusType = \"connected\" | \"disconnected\" | \"cached\";\n\ninterface StatusIndicatorProps {\n  status: StatusType;\n  className?: string;\n}\n\nexport default function StatusIndicator({ status, className }: StatusIndicatorProps) {\n  const statusConfig = {\n    connected: {\n      color: \"bg-emerald-500 dark:bg-emerald-400\",\n      textColor: \"text-emerald-700 dark:text-emerald-400\",\n      bgColor: \"bg-emerald-500/10 dark:bg-emerald-500/20\",\n      borderColor: \"border-emerald-500/30\",\n      label: \"Live\",\n      description: \"Real-time data\",\n      Icon: Wifi,\n      pulse: true,\n      ariaLabel: \"Connected to live data\",\n    },\n    disconnected: {\n      color: \"bg-red-500 dark:bg-red-400\",\n      textColor: \"text-red-700 dark:text-red-400\",\n      bgColor: \"bg-red-500/10 dark:bg-red-500/20\",\n      borderColor: \"border-red-500/30\",\n      label: \"Offline\",\n      description: \"No connection\",\n      Icon: WifiOff,\n      pulse: false,\n      ariaLabel: \"Disconnected from data source\",\n    },\n    cached: {\n      color: \"bg-amber-500 dark:bg-amber-400\",\n      textColor: \"text-amber-700 dark:text-amber-400\",\n      bgColor: \"bg-amber-500/10 dark:bg-amber-500/20\",\n      borderColor: \"border-amber-500/30\",\n      label: \"Cached\",\n      description: \"Stored data\",\n      Icon: Database,\n      pulse: false,\n      ariaLabel: \"Showing cached data\",\n    },\n  };\n\n  const config = statusConfig[status];\n  const StatusIcon = config.Icon;\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className={cn(\n        \"px-3 py-1.5 gap-2 border-2\",\n        config.bgColor,\n        config.borderColor,\n        className\n      )}\n      data-testid={`status-${status}`}\n      role=\"status\"\n      aria-label={config.ariaLabel}\n    >\n      <div className=\"relative flex items-center\" aria-hidden=\"true\">\n        <StatusIcon className={cn(\"h-4 w-4\", config.textColor)} />\n        {config.pulse && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className={cn(\"h-4 w-4 rounded-full animate-ping opacity-50\", config.color)} />\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-col items-start\">\n        <span className={cn(\"text-sm font-semibold leading-none\", config.textColor)}>\n          {config.label}\n        </span>\n        <span className=\"text-xs text-muted-foreground leading-none mt-0.5\">\n          {config.description}\n        </span>\n      </div>\n    </Badge>\n  );\n}\n","size_bytes":2566},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1084},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport default function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"h-11 w-11 p-0\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" aria-hidden=\"true\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" aria-hidden=\"true\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":683},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { StatsOverview } from \"@/components/StatsOverview\";\nimport { OpportunitiesTable } from \"@/components/OpportunitiesTable\";\nimport ArbitrageCard, { type ArbitrageOpportunity } from \"@/components/ArbitrageCard\";\nimport EmptyState from \"@/components/EmptyState\";\nimport SettingsDialog from \"@/components/SettingsDialog\";\nimport CacheIndicator from \"@/components/CacheIndicator\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport StatusIndicator from \"@/components/StatusIndicator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RefreshCw, LayoutGrid, TableIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { BookmakerWithCount } from \"@/components/FilterBar\";\n\ninterface GetOddsResponse {\n  opportunities: ArbitrageOpportunity[];\n  count: number;\n  cachedAt?: string;\n  isFromCache?: boolean;\n  cacheAge?: number;\n}\n\ninterface DashboardProps {\n  selectedSport: string;\n  selectedBookmakers: string[];\n  minProfit: number;\n  availableBookmakers: BookmakerWithCount[];\n  onSportChange: (sport: string) => void;\n  onBookmakerToggle: (bookmaker: string) => void;\n  onMinProfitChange: (profit: number) => void;\n  onClearFilters: () => void;\n  onSettingsClick: () => void;\n}\n\nexport default function Dashboard({\n  selectedSport,\n  selectedBookmakers,\n  minProfit,\n  availableBookmakers,\n  onSportChange,\n  onBookmakerToggle,\n  onMinProfitChange,\n  onClearFilters,\n  onSettingsClick,\n}: DashboardProps) {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<\"cards\" | \"table\">(\"cards\");\n\n  const buildQueryUrl = () => {\n    const params = new URLSearchParams();\n    params.append(\"sports\", selectedSport);\n    \n    if (minProfit > 0) {\n      params.append(\"minProfit\", minProfit.toString());\n    }\n    \n    if (selectedBookmakers.length > 0) {\n      params.append(\"bookmakers\", selectedBookmakers.join(\",\"));\n    }\n    \n    const queryString = params.toString();\n    return `/api/odds${queryString ? `?${queryString}` : \"\"}`;\n  };\n\n  const { \n    data, \n    isLoading, \n    isError, \n    refetch,\n    isFetching \n  } = useQuery<GetOddsResponse>({\n    queryKey: [buildQueryUrl()],\n    queryFn: async () => {\n      const apiKey = localStorage.getItem(\"oddsApiKey\") || \"\";\n      \n      const headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\",\n      };\n      \n      if (apiKey.trim()) {\n        headers[\"x-api-key\"] = apiKey;\n      }\n      \n      const response = await fetch(buildQueryUrl(), { headers });\n      if (!response.ok) {\n        try {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        } catch {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      return response.json();\n    },\n    refetchInterval: 30000,\n    staleTime: 30000,\n  });\n\n  const opportunities = data?.opportunities || [];\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const getStatus = () => {\n    if (isError) return \"disconnected\";\n    if (data?.cachedAt) return \"cached\";\n    return \"connected\";\n  };\n\n  const avgProfit = useMemo(() => {\n    if (opportunities.length === 0) return 0;\n    const total = opportunities.reduce((sum, opp) => sum + opp.profit, 0);\n    return total / opportunities.length;\n  }, [opportunities]);\n\n  const lastUpdated = useMemo(() => {\n    if (!data?.cachedAt) return \"Live\";\n    const date = new Date(data.cachedAt);\n    const now = new Date();\n    const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (seconds < 60) return `${seconds}s ago`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n    return date.toLocaleTimeString();\n  }, [data?.cachedAt]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col h-screen\">\n        <header className=\"sticky top-0 z-50 border-b border-border bg-background/95 backdrop-blur\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold\" data-testid=\"text-dashboard-title\">\n                Dashboard\n              </h1>\n              <div className=\"flex items-center gap-3\">\n                <Skeleton className=\"h-9 w-24\" />\n                <Skeleton className=\"h-9 w-9\" />\n                <Skeleton className=\"h-9 w-9\" />\n              </div>\n            </div>\n          </div>\n        </header>\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"container mx-auto px-6 py-6 space-y-6\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <Skeleton key={i} className=\"h-24 w-full\" data-testid={`skeleton-stat-${i}`} />\n              ))}\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <Skeleton key={i} className=\"h-80 w-full\" data-testid={`skeleton-${i}`} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <SettingsDialog open={settingsOpen} onOpenChange={setSettingsOpen} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header className=\"sticky top-0 z-50 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80\">\n        <div className=\"container mx-auto px-3 sm:px-6 py-3 sm:py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4\">\n            <div className=\"flex items-center gap-2 sm:gap-4 flex-wrap\">\n              <h1 className=\"text-xl sm:text-2xl font-bold\" data-testid=\"text-dashboard-title\">\n                Dashboard\n              </h1>\n              <StatusIndicator status={getStatus()} data-testid=\"status-indicator\" />\n              {data?.isFromCache && (\n                <CacheIndicator \n                  isFromCache={data.isFromCache} \n                  cacheAge={data.cacheAge}\n                />\n              )}\n            </div>\n            <div className=\"flex items-center gap-2 sm:gap-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                disabled={isFetching}\n                data-testid=\"button-refresh\"\n                className=\"gap-1.5 sm:gap-2 text-xs sm:text-sm\"\n              >\n                <RefreshCw className={cn(\"h-3.5 w-3.5 sm:h-4 sm:w-4\", isFetching && \"animate-spin\")} />\n                <span className=\"hidden sm:inline\">Refresh</span>\n              </Button>\n              <ThemeToggle />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"container mx-auto px-3 sm:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6\">\n          <StatsOverview\n            totalOpportunities={opportunities.length}\n            avgProfit={avgProfit}\n            lastUpdated={lastUpdated}\n            isLoading={isFetching}\n          />\n\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0\">\n            <h2 className=\"text-base sm:text-lg font-semibold\" data-testid=\"text-opportunities-title\">\n              Opportunities ({opportunities.length})\n            </h2>\n            <Tabs value={viewMode} onValueChange={(v) => setViewMode(v as \"cards\" | \"table\")}>\n              <TabsList data-testid=\"tabs-view-mode\" className=\"w-full sm:w-auto\">\n                <TabsTrigger value=\"cards\" className=\"gap-1.5 sm:gap-2 flex-1 sm:flex-initial text-xs sm:text-sm\" data-testid=\"tab-cards\">\n                  <LayoutGrid className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                  Cards\n                </TabsTrigger>\n                <TabsTrigger value=\"table\" className=\"gap-1.5 sm:gap-2 flex-1 sm:flex-initial text-xs sm:text-sm\" data-testid=\"tab-table\">\n                  <TableIcon className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                  Table\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n\n          {opportunities.length > 0 ? (\n            <>\n              {viewMode === \"cards\" ? (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-4 sm:gap-6\" data-testid=\"grid-opportunities\">\n                  {opportunities.map((opp) => (\n                    <ArbitrageCard\n                      key={opp.id}\n                      opportunity={opp}\n                      onClick={() => {}}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto -mx-3 sm:mx-0\">\n                  <OpportunitiesTable \n                    opportunities={opportunities}\n                    onClick={() => {}}\n                  />\n                </div>\n              )}\n            </>\n          ) : (\n            <EmptyState onRefresh={handleRefresh} />\n          )}\n        </div>\n      </main>\n\n      <SettingsDialog open={settingsOpen} onOpenChange={setSettingsOpen} />\n    </div>\n  );\n}\n","size_bytes":9388},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/ArbitrageCard.tsx":{"content":"import ArbitrageCard, { type ArbitrageOpportunity } from \"../ArbitrageCard\";\n\nconst mockOpportunity: ArbitrageOpportunity = {\n  id: \"1\",\n  sport: \"Soccer\",\n  match: \"Man City vs Arsenal\",\n  bookmakers: [\n    { name: \"Bet365\", outcome: \"Home\", odds: 2.10, stake: 476 },\n    { name: \"DraftKings\", outcome: \"Away\", odds: 3.50, stake: 286 },\n    { name: \"FanDuel\", outcome: \"Draw\", odds: 3.80, stake: 263 },\n  ],\n  profit: 3.2,\n  timestamp: new Date().toISOString(),\n};\n\nexport default function ArbitrageCardExample() {\n  return (\n    <div className=\"p-8 max-w-md\">\n      <ArbitrageCard\n        opportunity={mockOpportunity}\n        onClick={() => console.log(\"Card clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":700},"client/src/components/examples/DashboardHeader.tsx":{"content":"import DashboardHeader from \"../DashboardHeader\";\nimport { ThemeProvider } from \"../ThemeProvider\";\nimport { useState } from \"react\";\n\nexport default function DashboardHeaderExample() {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const handleRefresh = () => {\n    setIsRefreshing(true);\n    console.log(\"Refresh triggered\");\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  return (\n    <ThemeProvider>\n      <DashboardHeader\n        status=\"connected\"\n        onRefresh={handleRefresh}\n        onSettingsClick={() => console.log(\"Settings clicked\")}\n        isRefreshing={isRefreshing}\n      />\n    </ThemeProvider>\n  );\n}\n","size_bytes":653},"client/src/components/examples/EmptyState.tsx":{"content":"import EmptyState from \"../EmptyState\";\n\nexport default function EmptyStateExample() {\n  return (\n    <EmptyState onRefresh={() => console.log(\"Refresh clicked\")} />\n  );\n}\n","size_bytes":173},"client/src/components/examples/FilterBar.tsx":{"content":"import FilterBar from \"../FilterBar\";\nimport { useState } from \"react\";\n\nexport default function FilterBarExample() {\n  const [selectedSport, setSelectedSport] = useState(\"all\");\n  const [selectedBookmakers, setSelectedBookmakers] = useState<string[]>([]);\n  const [minProfit, setMinProfit] = useState(0);\n\n  const handleBookmakerToggle = (bookmaker: string) => {\n    setSelectedBookmakers((prev) =>\n      prev.includes(bookmaker)\n        ? prev.filter((b) => b !== bookmaker)\n        : [...prev, bookmaker]\n    );\n  };\n\n  const handleClearFilters = () => {\n    setSelectedSport(\"all\");\n    setSelectedBookmakers([]);\n    setMinProfit(0);\n  };\n\n  return (\n    <FilterBar\n      selectedSport={selectedSport}\n      selectedBookmakers={selectedBookmakers}\n      minProfit={minProfit}\n      onSportChange={setSelectedSport}\n      onBookmakerToggle={handleBookmakerToggle}\n      onMinProfitChange={setMinProfit}\n      onClearFilters={handleClearFilters}\n    />\n  );\n}\n","size_bytes":963},"client/src/components/examples/SettingsDialog.tsx":{"content":"import SettingsDialog from \"../SettingsDialog\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function SettingsDialogExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"p-8\">\n      <Button onClick={() => setOpen(true)}>Open Settings</Button>\n      <SettingsDialog open={open} onOpenChange={setOpen} />\n    </div>\n  );\n}\n","size_bytes":408},"client/src/components/examples/StatusIndicator.tsx":{"content":"import StatusIndicator from \"../StatusIndicator\";\n\nexport default function StatusIndicatorExample() {\n  return (\n    <div className=\"p-8 space-y-4\">\n      <StatusIndicator status=\"connected\" />\n      <StatusIndicator status=\"cached\" />\n      <StatusIndicator status=\"disconnected\" />\n    </div>\n  );\n}\n","size_bytes":302},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from \"../ThemeToggle\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":264},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/examples/Dashboard.tsx":{"content":"import Dashboard from \"../Dashboard\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\n\nexport default function DashboardExample() {\n  return (\n    <ThemeProvider>\n      <Dashboard />\n    </ThemeProvider>\n  );\n}\n","size_bytes":223},"README.md":{"content":"# Odds Arbitrage Scanner (arb-scanner)\n\nA full-stack web application that scans live bookmaker odds and identifies arbitrage opportunities across multiple sports and bookmakers.\n\n## Features\n\n- **Real-time Odds Scanning**: Integrates with The Odds API to fetch live odds from multiple bookmakers\n- **Arbitrage Detection**: Advanced algorithm to identify profitable arbitrage opportunities\n- **Multi-Sport Support**: Soccer (EPL, La Liga, Bundesliga), Basketball (NBA), American Football (NFL), and Tennis (ATP)\n- **Mock Mode**: Test the application without using API credits\n- **Responsive Dashboard**: Clean, modern UI with real-time updates and filtering\n- **Smart Caching**: 60-second cache to minimize API calls and costs\n- **Kelly Criterion**: Optimal stake sizing calculations for risk management\n\n## Tech Stack\n\n- **Frontend**: React + Vite + TypeScript + Tailwind CSS\n- **Backend**: Node.js + Express + TypeScript\n- **Testing**: Jest with comprehensive test suite\n- **Deployment**: Docker + docker-compose\n- **API**: The Odds API integration\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 20+ and npm\n- The Odds API key (get one at [https://the-odds-api.com/](https://the-odds-api.com/))\n- Docker (optional, for containerized deployment)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd arb-scanner\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Configure environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` and add your API key:\n   ```\n   ODDS_API_KEY=your_actual_api_key_here\n   MOCK_ODDS=false\n   ```\n\n4. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n5. **Open your browser**\n   Navigate to `http://localhost:5000`\n\n### Mock Mode (No API Key Required)\n\nTo test the application without an API key:\n\n1. Set `MOCK_ODDS=true` in your `.env` file\n2. Run `npm run dev`\n3. The app will use simulated data with realistic arbitrage opportunities\n\n## API Endpoints\n\n### GET /api/odds\nFetch current arbitrage opportunities.\n\n**Query Parameters:**\n- `sports` (optional): Comma-separated list of sports (e.g., `soccer_epl,basketball_nba`)\n- `minProfit` (optional): Minimum profit percentage (e.g., `2.5`)\n- `bookmakers` (optional): Filter by specific bookmakers\n\n**Response:**\n```json\n{\n  \"opportunities\": [\n    {\n      \"id\": \"unique-id\",\n      \"sport\": \"Basketball - NBA\",\n      \"match\": \"Lakers vs Warriors\",\n      \"bookmakers\": [\n        {\n          \"name\": \"Bet365\",\n          \"outcome\": \"Lakers\",\n          \"odds\": 2.10,\n          \"stake\": 487.80\n        },\n        {\n          \"name\": \"DraftKings\",\n          \"outcome\": \"Warriors\",\n          \"odds\": 2.05,\n          \"stake\": 512.20\n        }\n      ],\n      \"profit\": 2.44,\n      \"timestamp\": \"2025-01-07T15:30:00.000Z\"\n    }\n  ],\n  \"count\": 1,\n  \"cachedAt\": \"2025-01-07T15:30:00.000Z\"\n}\n```\n\n### GET /healthz\nHealth check endpoint for monitoring.\n\n**Response:**\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-01-07T15:30:00.000Z\",\n  \"services\": {\n    \"api\": true,\n    \"cache\": true\n  }\n}\n```\n\n## Testing\n\n### Run Tests\n```bash\nnpm test\n```\n\n### Watch Mode\n```bash\nnpm run test:watch\n```\n\n### Coverage Report\n```bash\nnpm run test:coverage\n```\n\nThe test suite includes:\n- Implied probability calculations\n- Arbitrage detection for 2-way and 3-way markets\n- Equal profit validation across all outcomes\n- Kelly Criterion stake sizing\n- Edge cases and negative scenarios\n\n## Docker Deployment\n\n### Build and Run with Docker Compose\n\n```bash\n# Build and start containers\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop containers\ndocker-compose down\n```\n\nThe application will be available at `http://localhost:8080`\n\n### Production Docker Build\n\n```bash\n# Build production image\ndocker build -t arb-scanner .\n\n# Run container\ndocker run -p 8080:8080 \\\n  -e ODDS_API_KEY=your_key_here \\\n  -e MOCK_ODDS=false \\\n  arb-scanner\n```\n\n## Project Structure\n\n```\narb-scanner/\nâ”œâ”€â”€ client/                 # React frontend\nâ”‚   â”œâ”€â”€ src/\nâ”‚   â”‚   â”œâ”€â”€ components/    # UI components\nâ”‚   â”‚   â”œâ”€â”€ pages/         # Page components\nâ”‚   â”‚   â”œâ”€â”€ hooks/         # Custom React hooks\nâ”‚   â”‚   â””â”€â”€ lib/           # Utilities\nâ”‚   â””â”€â”€ index.html\nâ”œâ”€â”€ server/                # Express backend\nâ”‚   â”œâ”€â”€ index.ts           # Server entry point\nâ”‚   â”œâ”€â”€ routes.ts          # API routes\nâ”‚   â”œâ”€â”€ arbitrage-engine.ts # Arbitrage calculations\nâ”‚   â”œâ”€â”€ odds-provider.ts   # API integration\nâ”‚   â””â”€â”€ storage.ts         # In-memory storage\nâ”œâ”€â”€ shared/                # Shared types and schemas\nâ”‚   â””â”€â”€ schema.ts\nâ”œâ”€â”€ Dockerfile             # Docker configuration\nâ”œâ”€â”€ docker-compose.yml     # Docker Compose setup\nâ”œâ”€â”€ jest.config.js         # Jest configuration\nâ””â”€â”€ package.json           # Dependencies and scripts\n```\n\n## How It Works\n\n### 1. Data Collection\nThe application fetches live odds from The Odds API for selected sports and bookmakers. Responses are cached for 60 seconds to minimize API usage.\n\n### 2. Arbitrage Detection\nFor each event, the engine:\n1. Identifies the best odds for each possible outcome across all bookmakers\n2. Calculates the total implied probability\n3. If total implied probability < 100%, an arbitrage opportunity exists\n4. Calculates optimal stakes for equal profit across all outcomes\n\n### 3. Stake Calculation\nThe engine uses the formula:\n```\nstake_i = (total_stake Ã— implied_prob_i) / total_implied_probability\n```\n\nThis ensures equal profit regardless of which outcome occurs.\n\n### 4. Kelly Criterion (Optional)\nFor advanced users, the Kelly Criterion calculates optimal bet sizing based on edge and bankroll:\n```\nf* = (bp - q) / b\n```\nwhere:\n- `b` = odds - 1 (net odds)\n- `p` = probability of winning\n- `q` = probability of losing (1 - p)\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Description | Default | Required |\n|----------|-------------|---------|----------|\n| `ODDS_API_KEY` | Your The Odds API key | - | Yes (unless MOCK_ODDS=true) |\n| `MOCK_ODDS` | Use mock data instead of real API | `false` | No |\n| `PORT` | Server port | `5000` | No |\n| `NODE_ENV` | Environment (`development`/`production`) | `development` | No |\n| `CACHE_TTL` | Cache timeout in seconds | `60` | No |\n\n### Supported Sports\n\n- `soccer_epl` - English Premier League\n- `soccer_spain_la_liga` - Spanish La Liga\n- `soccer_germany_bundesliga` - German Bundesliga\n- `basketball_nba` - NBA Basketball\n- `americanfootball_nfl` - NFL Football\n- `tennis_atp` - ATP Tennis\n\n## Future Enhancements\n\n1. **Database Persistence**: SQLite integration via Prisma for historical data\n2. **Telegram Alerts**: Real-time notifications for high-profit opportunities\n3. **Multi-Provider Support**: Additional odds providers beyond The Odds API\n4. **User Authentication**: Secure user accounts and personalized settings\n5. **Profit Tracking**: Historical performance and ROI analytics\n\n## API Rate Limits\n\nThe Odds API has the following limits:\n- Free tier: 500 requests/month\n- Each sport query = 1 request\n- Cache helps minimize requests\n\n**Tip**: Use mock mode for development to preserve your API quota.\n\n## Troubleshooting\n\n### Issue: \"No arbitrage opportunities found\"\n- **Solution**: Real arbitrage opportunities are rare. Try using mock mode or checking different sports.\n\n### Issue: \"API key invalid\"\n- **Solution**: Verify your API key is correct in `.env` and restart the server.\n\n### Issue: \"Port 5000 already in use\"\n- **Solution**: Change the `PORT` variable in `.env` to a different port.\n\n### Issue: Tests failing\n- **Solution**: Ensure all dependencies are installed with `npm install`\n\n## Contributing\n\nContributions are welcome! Please:\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new features\n4. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor issues and questions:\n- Check existing GitHub issues\n- Review the troubleshooting section\n- Contact: [Your contact information]\n\n## Acknowledgments\n\n- The Odds API for providing reliable odds data\n- Replit for the development platform\n- Open source community for the tech stack\n\n---\n\n**Disclaimer**: This tool is for educational purposes only. Sports betting may be illegal in your jurisdiction. Always gamble responsibly and within your means.\n","size_bytes":8392},"jest.config.js":{"content":"export default {\n  preset: 'ts-jest/presets/default-esm',\n  testEnvironment: 'node',\n  extensionsToTreatAsEsm: ['.ts'],\n  moduleNameMapper: {\n    '^@shared/(.*)$': '<rootDir>/shared/$1',\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1',\n  },\n  transform: {\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        useESM: true,\n      },\n    ],\n  },\n  testMatch: [\n    '**/__tests__/**/*.ts',\n    '**/?(*.)+(spec|test).ts',\n  ],\n  collectCoverageFrom: [\n    'server/**/*.ts',\n    '!server/**/*.test.ts',\n    '!server/**/*.spec.ts',\n    '!server/vite.ts',\n  ],\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n};\n","size_bytes":623},"replit.md":{"content":"# Odds Arbitrage Scanner\n\n## Overview\n\nA real-time sports betting arbitrage opportunity scanner that identifies profitable betting scenarios across multiple bookmakers. The application fetches live odds from The Odds API, calculates arbitrage opportunities using sophisticated mathematical algorithms, and presents them in a clean, data-focused interface. Built for speed and clarity, enabling users to identify and act on arbitrage opportunities within seconds.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type safety\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and caching\n\n**UI Framework:**\n- Shadcn UI component library built on Radix UI primitives\n- Sidebar layout using Shadcn sidebar primitives for navigation and filters\n- Tailwind CSS for styling with custom design system\n- Professional dashboard design principles for data-intensive interfaces\n- Custom CSS variables for theming (light/dark mode support)\n- Stats overview cards for key metrics display\n- Dual view modes: Card grid and Table view with toggle\n\n**Design System:**\n- DELLTA-inspired professional dark theme with sidebar layout\n- Lucide React icons for consistent iconography\n- Inter font family for general UI\n- JetBrains Mono for numerical data display (odds, stakes, percentages)\n- Color palette: Deep dark backgrounds (5-8% lightness) with cyan/turquoise primary (188 95% 55%) and purple accent (268 85% 65%)\n- Bright success green (158 88% 50%) for profit indicators\n- High contrast for enhanced readability\n- Responsive design with mobile-first approach\n\n**State Management:**\n- React Query for API data fetching and caching with configurable stale times\n- Local storage for user preferences (API keys, mock mode settings)\n- React Context for theme management (light/dark mode)\n- URL query parameters for filter state persistence\n\n### Backend Architecture\n\n**Core Framework:**\n- Node.js with Express server\n- TypeScript for type safety across the stack\n- ESM module system\n\n**Arbitrage Engine:**\n- Advanced mathematical calculations for 2-way and 3-way betting markets\n- Implied probability calculations from decimal odds\n- Equal-profit stake distribution algorithms\n- Kelly Criterion support for stake sizing\n- Comprehensive unit testing for calculation accuracy\n\n**API Design Pattern:**\n- RESTful endpoints with Zod schema validation\n- Shared type definitions between client and server via `/shared` directory\n- Error handling middleware with structured error responses\n- Request logging with performance metrics\n\n**Key Endpoints:**\n- `GET /api/odds` - Returns calculated arbitrage opportunities with optional filtering\n- `GET /healthz` - Health check endpoint for monitoring\n\n**Caching Strategy:**\n- In-memory cache with configurable TTL (30-60 seconds default)\n- Cache key generation based on request parameters\n- Automatic cache invalidation on expiry\n- Separate caching layers for odds data and calculated opportunities\n\n### Data Flow Architecture\n\n**Provider Interface Pattern:**\n- Abstract `OddsProvider` interface for pluggable data sources\n- Current implementation: The Odds API provider\n- Mock provider for development and testing (activated via `MOCK_ODDS=true`)\n- Future-ready for multiple provider support\n\n**Data Processing Pipeline:**\n1. Fetch raw odds from provider (with caching)\n2. Normalize bookmaker data to common format\n3. Calculate arbitrage opportunities using the arbitrage engine\n4. Filter results based on query parameters (sport, bookmaker, min profit)\n5. Return formatted response to client\n\n**Normalization Process:**\n- Maps provider-specific odds formats to internal schema\n- Handles 2-way markets (e.g., tennis) and 3-way markets (e.g., soccer)\n- Validates data integrity using Zod schemas\n\n### Database Architecture\n\n**Current State:**\n- In-memory storage for settings and cached opportunities\n- No persistent database currently implemented\n- Drizzle ORM configured for future PostgreSQL integration\n\n**Future Migration Path:**\n- Drizzle schema definitions in `/shared/schema.ts`\n- PostgreSQL via Neon serverless connector planned\n- Migration files directory structure ready (`/migrations`)\n- Session management with connect-pg-simple configured\n\n**Storage Interface:**\n- `IStorage` interface for abstraction\n- `MemStorage` implementation for current in-memory operations\n- Settings management (mock mode, cache timeout)\n- Opportunities caching layer\n\n### Build and Deployment\n\n**Development Workflow:**\n- Vite dev server with HMR for frontend (port 5173)\n- tsx for TypeScript execution in development\n- Express server (port 8080 or configured PORT)\n- Source map support for debugging\n\n**Production Build:**\n- Vite builds client code to `/dist/public`\n- esbuild bundles server code to `/dist`\n- Single unified build output directory\n- Static file serving in production mode\n\n**Environment Configuration:**\n- `.env` files for environment variables\n- `DATABASE_URL` for future PostgreSQL connection\n- `ODDS_API_KEY` for The Odds API integration\n- `MOCK_ODDS` flag for development mode\n- `NODE_ENV` for environment detection\n\n**Docker Support:**\n- Dockerized containers ready (referenced in spec)\n- docker-compose for local development\n- Separate frontend and backend containers\n\n## External Dependencies\n\n### Third-Party APIs\n\n**The Odds API (Primary Data Source):**\n- Live odds fetching for soccer, basketball, and tennis\n- Endpoints: `/sports/{sport_key}/odds`\n- Rate limiting considerations (30-60 second caching)\n- API key authentication via headers or environment variables\n- Mock mode available for development without API consumption\n\n### UI Component Libraries\n\n**Radix UI Primitives:**\n- Accordion, Alert Dialog, Avatar, Checkbox, Dialog, Dropdown Menu\n- Popover, Select, Slider, Switch, Tabs, Toast, Tooltip\n- Navigation Menu, Context Menu, Hover Card\n- All primitives provide accessibility features out of the box\n\n**Additional UI Dependencies:**\n- `embla-carousel-react` for carousel components\n- `cmdk` for command palette functionality\n- `vaul` for drawer components\n- `react-day-picker` for date selection\n- `input-otp` for OTP input fields\n\n### Data Validation and Type Safety\n\n**Zod:**\n- Runtime type validation for API requests/responses\n- Schema definitions shared between client and server\n- Integration with React Hook Form via `@hookform/resolvers`\n- Drizzle-zod for database schema validation\n\n### Styling and Design\n\n**Tailwind CSS Ecosystem:**\n- Core Tailwind CSS framework\n- `tailwindcss-animate` for animations\n- Custom configuration with design tokens\n- PostCSS for processing\n\n**Icon Libraries:**\n- Lucide React for primary iconography (TrendingUp, Settings, LayoutGrid, TableIcon, etc.)\n\n### Utility Libraries\n\n**Class and Style Management:**\n- `clsx` and `class-variance-authority` for conditional classes\n- `tailwind-merge` for class deduplication\n\n**Date Handling:**\n- `date-fns` for date formatting and manipulation\n\n**Routing:**\n- `wouter` for lightweight client-side routing\n\n### Development Tools\n\n**Replit-Specific Plugins:**\n- `@replit/vite-plugin-runtime-error-modal` for error overlay\n- `@replit/vite-plugin-cartographer` for code mapping\n- `@replit/vite-plugin-dev-banner` for development indicators\n\n### Database and ORM\n\n**Drizzle ORM:**\n- `drizzle-orm` for type-safe database queries\n- `drizzle-kit` for migrations\n- `@neondatabase/serverless` for PostgreSQL connection\n- `connect-pg-simple` for session storage (future implementation)\n\n### Testing Framework\n\n**Jest (Planned):**\n- Unit tests for arbitrage calculation engine\n- Test coverage for 2-way and 3-way market calculations\n- Positive and negative test scenarios\n\n### Future Integrations (Documented in Spec)\n\n- SQLite/PostgreSQL persistence layer\n- Telegram bot for arbitrage alerts\n- Multi-provider odds aggregation\n- User authentication system\n- Deployment to Vercel (frontend) and Render/Fly.io (backend)","size_bytes":8071},"server/arbitrage-engine.test.ts":{"content":"import { describe, it, expect } from '@jest/globals';\nimport {\n  calculateImpliedProbability,\n  calculateArbitrage,\n  calculateKellyStake,\n  calculateFairMarketPrice,\n  calculateExpectedValue,\n  findBestArbitrage,\n  findAllArbitrageOpportunities,\n  findPositiveEVOpportunities,\n  validateArbitrage,\n} from './arbitrage-engine';\nimport type { OddsApiEvent } from '@shared/schema';\n\n// ============================================================================\n// ARBITRAGE ENGINE TESTS\n// ============================================================================\n\ndescribe('Arbitrage Engine', () => {\n  \n  describe('calculateImpliedProbability', () => {\n    it('should calculate correct implied probability from decimal odds', () => {\n      expect(calculateImpliedProbability(2.0)).toBe(50);\n      expect(calculateImpliedProbability(4.0)).toBe(25);\n      expect(calculateImpliedProbability(1.5)).toBeCloseTo(66.67, 1);\n    });\n\n    it('should handle very high odds correctly', () => {\n      expect(calculateImpliedProbability(10.0)).toBe(10);\n      expect(calculateImpliedProbability(100.0)).toBe(1);\n    });\n  });\n\n  describe('calculateArbitrage', () => {\n    it('should detect arbitrage in a 2-way market', () => {\n      const bets = [\n        { bookmaker: 'Bet365', outcome: 'Team A', odds: 2.10 },\n        { bookmaker: 'DraftKings', outcome: 'Team B', odds: 2.10 },\n      ];\n\n      const result = calculateArbitrage(bets, 1000);\n      \n      expect(result.hasArbitrage).toBe(true);\n      expect(result.profitPercentage).toBeGreaterThan(0);\n      expect(result.totalImpliedProbability).toBeLessThan(100);\n      expect(result.stakes).toHaveLength(2);\n      expect(result.stakes.reduce((a, b) => a + b, 0)).toBeCloseTo(1000, 1);\n    });\n\n    it('should detect no arbitrage when total implied probability >= 100%', () => {\n      const bets = [\n        { bookmaker: 'Bet365', outcome: 'Team A', odds: 1.90 },\n        { bookmaker: 'DraftKings', outcome: 'Team B', odds: 1.90 },\n      ];\n\n      const result = calculateArbitrage(bets, 1000);\n      \n      expect(result.hasArbitrage).toBe(false);\n      expect(result.profitPercentage).toBe(0);\n      expect(result.totalImpliedProbability).toBeGreaterThanOrEqual(100);\n    });\n\n    it('should handle 3-way markets correctly', () => {\n      const bets = [\n        { bookmaker: 'Bet365', outcome: 'Home', odds: 2.50 },\n        { bookmaker: 'DraftKings', outcome: 'Away', odds: 3.20 },\n        { bookmaker: 'FanDuel', outcome: 'Draw', odds: 3.80 },\n      ];\n\n      const result = calculateArbitrage(bets, 1000);\n      \n      expect(result.hasArbitrage).toBe(true);\n      expect(result.profitPercentage).toBeGreaterThan(0);\n      expect(result.stakes).toHaveLength(3);\n      expect(result.stakes.reduce((a, b) => a + b, 0)).toBeCloseTo(1000, 1);\n    });\n\n    it('should calculate equal profit across all outcomes', () => {\n      const bets = [\n        { bookmaker: 'Bet365', outcome: 'Team A', odds: 2.10 },\n        { bookmaker: 'DraftKings', outcome: 'Team B', odds: 2.10 },\n      ];\n\n      const result = calculateArbitrage(bets, 1000);\n      const totalStake = result.stakes.reduce((a, b) => a + b, 0);\n      \n      // Calculate profit for each outcome\n      const profits = result.stakes.map((stake, i) => {\n        const payout = stake * bets[i].odds;\n        return payout - totalStake;\n      });\n      \n      // All profits should be approximately equal\n      profits.forEach(profit => {\n        expect(profit).toBeCloseTo(profits[0], 1);\n      });\n    });\n  });\n\n  describe('calculateKellyStake', () => {\n    it('should calculate Kelly stake correctly', () => {\n      const odds = 2.0;\n      const trueProbability = 60;\n      const bankroll = 1000;\n      const kellyFraction = 0.5;\n\n      const stake = calculateKellyStake(odds, trueProbability, bankroll, kellyFraction);\n      \n      expect(stake).toBeGreaterThan(0);\n      expect(stake).toBeLessThanOrEqual(bankroll);\n    });\n\n    it('should return 0 for negative edge', () => {\n      const odds = 1.5;\n      const trueProbability = 50;\n      const bankroll = 1000;\n\n      const stake = calculateKellyStake(odds, trueProbability, bankroll);\n      \n      expect(stake).toBe(0);\n    });\n\n    it('should apply fractional Kelly correctly', () => {\n      const odds = 2.0;\n      const trueProbability = 60;\n      const bankroll = 1000;\n\n      const fullKelly = calculateKellyStake(odds, trueProbability, bankroll, 1.0);\n      const halfKelly = calculateKellyStake(odds, trueProbability, bankroll, 0.5);\n      \n      expect(halfKelly).toBeCloseTo(fullKelly / 2, 1);\n    });\n  });\n\n  describe('findBestArbitrage', () => {\n    it('should find arbitrage opportunity in event data', () => {\n      const event: OddsApiEvent = {\n        id: 'test_event_1',\n        sport_key: 'basketball_nba',\n        sport_title: 'Basketball - NBA',\n        commence_time: new Date().toISOString(),\n        home_team: 'Lakers',\n        away_team: 'Warriors',\n        bookmakers: [\n          {\n            key: 'bet365',\n            title: 'Bet365',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.10 },\n                { name: 'Warriors', price: 2.00 },\n              ]\n            }]\n          },\n          {\n            key: 'draftkings',\n            title: 'DraftKings',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.05 },\n                { name: 'Warriors', price: 2.10 },\n              ]\n            }]\n          },\n        ]\n      };\n\n      const opportunity = findBestArbitrage(event, 'h2h');\n      \n      expect(opportunity).not.toBeNull();\n      expect(opportunity!.sport).toBe('Basketball - NBA');\n      expect(opportunity!.match).toBe('Lakers vs Warriors');\n      expect(opportunity!.bookmakers).toHaveLength(2);\n      expect(opportunity!.profit).toBeGreaterThan(0);\n    });\n\n    it('should return null when no arbitrage exists', () => {\n      const event: OddsApiEvent = {\n        id: 'test_event_2',\n        sport_key: 'basketball_nba',\n        sport_title: 'Basketball - NBA',\n        commence_time: new Date().toISOString(),\n        home_team: 'Lakers',\n        away_team: 'Warriors',\n        bookmakers: [\n          {\n            key: 'bet365',\n            title: 'Bet365',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 1.90 },\n                { name: 'Warriors', price: 1.90 },\n              ]\n            }]\n          },\n        ]\n      };\n\n      const opportunity = findBestArbitrage(event, 'h2h');\n      \n      expect(opportunity).toBeNull();\n    });\n  });\n\n  describe('findAllArbitrageOpportunities', () => {\n    it('should find all arbitrage opportunities and sort by profit', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'event_1',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.10 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.05 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n          ]\n        },\n        {\n          id: 'event_2',\n          sport_key: 'tennis_atp',\n          sport_title: 'Tennis - ATP',\n          commence_time: new Date().toISOString(),\n          home_team: 'Djokovic',\n          away_team: 'Nadal',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Djokovic', price: 2.20 },\n                  { name: 'Nadal', price: 1.80 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Djokovic', price: 2.10 },\n                  { name: 'Nadal', price: 1.90 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const opportunities = findAllArbitrageOpportunities(events, 0);\n      \n      expect(opportunities.length).toBeGreaterThan(0);\n      \n      // Verify sorting by profit (descending)\n      for (let i = 1; i < opportunities.length; i++) {\n        expect(opportunities[i - 1].profit).toBeGreaterThanOrEqual(opportunities[i].profit);\n      }\n    });\n\n    it('should filter by minimum profit percentage', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'event_1',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.10 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.05 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const allOpportunities = findAllArbitrageOpportunities(events, 0);\n      const filteredOpportunities = findAllArbitrageOpportunities(events, 5);\n      \n      expect(filteredOpportunities.length).toBeLessThanOrEqual(allOpportunities.length);\n      filteredOpportunities.forEach(opp => {\n        expect(opp.profit).toBeGreaterThanOrEqual(5);\n      });\n    });\n  });\n\n  describe('validateArbitrage', () => {\n    it('should validate that all outcomes yield equal profit', () => {\n      const bets = [\n        { bookmaker: 'Bet365', outcome: 'Team A', odds: 2.10 },\n        { bookmaker: 'DraftKings', outcome: 'Team B', odds: 2.10 },\n      ];\n\n      const arbitrageCalc = calculateArbitrage(bets, 1000);\n      \n      const opportunity = {\n        id: 'test_1',\n        sport: 'Test Sport',\n        match: 'Team A vs Team B',\n        bookmakers: bets.map((bet, i) => ({\n          name: bet.bookmaker,\n          outcome: bet.outcome,\n          odds: bet.odds,\n          stake: arbitrageCalc.stakes[i],\n        })),\n        profit: arbitrageCalc.profitPercentage,\n        timestamp: new Date().toISOString(),\n      };\n\n      expect(validateArbitrage(opportunity)).toBe(true);\n    });\n\n    it('should invalidate incorrect stake distributions', () => {\n      const opportunity = {\n        id: 'test_2',\n        sport: 'Test Sport',\n        match: 'Team A vs Team B',\n        bookmakers: [\n          { name: 'Bet365', outcome: 'Team A', odds: 2.10, stake: 600 },\n          { name: 'DraftKings', outcome: 'Team B', odds: 2.10, stake: 400 },\n        ],\n        profit: 5.0,\n        timestamp: new Date().toISOString(),\n      };\n\n      expect(validateArbitrage(opportunity)).toBe(false);\n    });\n  });\n\n  describe('calculateFairMarketPrice', () => {\n    it('should calculate fair market price from multiple bookmaker odds', () => {\n      const odds = [2.10, 2.05, 2.15, 2.08];\n      const fairPrice = calculateFairMarketPrice(odds);\n      \n      expect(fairPrice).not.toBeNull();\n      // Average of implied probabilities: (47.62 + 48.78 + 46.51 + 48.08) / 4 = 47.75\n      expect(fairPrice).toBeCloseTo(47.75, 1);\n    });\n\n    it('should return null when insufficient bookmakers', () => {\n      const odds = [2.10, 2.05]; // Only 2 bookmakers\n      const fairPrice = calculateFairMarketPrice(odds);\n      \n      expect(fairPrice).toBeNull();\n    });\n\n    it('should respect minimum bookmaker requirement', () => {\n      const odds = [2.10, 2.05, 2.15, 2.08];\n      const fairPriceWith3 = calculateFairMarketPrice(odds, 3);\n      const fairPriceWith5 = calculateFairMarketPrice(odds, 5);\n      \n      expect(fairPriceWith3).not.toBeNull();\n      expect(fairPriceWith5).toBeNull(); // Not enough bookmakers\n    });\n\n    it('should handle identical odds correctly', () => {\n      const odds = [2.00, 2.00, 2.00];\n      const fairPrice = calculateFairMarketPrice(odds);\n      \n      expect(fairPrice).toBe(50); // All imply 50%\n    });\n  });\n\n  describe('calculateExpectedValue', () => {\n    it('should calculate positive EV correctly', () => {\n      const bookmakerOdds = 2.20; // Implied prob: 45.45%\n      const fairProbability = 50; // True prob: 50%\n      const stake = 100;\n      \n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeGreaterThan(0); // Positive EV (fair 50% > implied 45.45%)\n      expect(ev.evDollars).toBeGreaterThan(0);\n    });\n\n    it('should calculate negative EV correctly', () => {\n      const bookmakerOdds = 1.80; // Implied prob: 55.56%\n      const fairProbability = 50; // True prob: 50%\n      const stake = 100;\n      \n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeLessThan(0); // Negative EV (fair 50% < implied 55.56%)\n      expect(ev.evDollars).toBeLessThan(0);\n    });\n\n    it('should calculate zero EV when odds match fair price', () => {\n      const bookmakerOdds = 2.00; // Implied prob: 50%\n      const fairProbability = 50; // True prob: 50%\n      const stake = 100;\n      \n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeCloseTo(0, 1);\n      expect(ev.evDollars).toBeCloseTo(0, 1);\n    });\n\n    it('should scale EV dollars with stake', () => {\n      const bookmakerOdds = 1.80;\n      const fairProbability = 50;\n      \n      const ev100 = calculateExpectedValue(bookmakerOdds, fairProbability, 100);\n      const ev200 = calculateExpectedValue(bookmakerOdds, fairProbability, 200);\n      \n      expect(ev200.evDollars).toBeCloseTo(ev100.evDollars * 2, 1);\n      expect(ev200.evPercentage).toBe(ev100.evPercentage); // EV% stays the same\n    });\n\n    it('should follow the EV formula correctly', () => {\n      const bookmakerOdds = 2.50; // Implied prob: 40%\n      const fairProbability = 45; // True prob: 45%\n      const stake = 100;\n      \n      // EV% = ((fairProb - impliedProb) / impliedProb) * 100\n      // EV% = (0.45 - 0.4) / 0.4 * 100 = 12.5%\n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeCloseTo(12.5, 1);\n      expect(ev.evDollars).toBeCloseTo(12.5, 1);\n    });\n\n    it('should demonstrate fix: higher odds than fair gives positive EV', () => {\n      // When bookmaker odds are HIGHER than fair odds, EV should be POSITIVE\n      const bookmakerOdds = 2.5; // Implied prob: 40%\n      const fairProbability = 50; // True prob: 50% (higher than implied)\n      const stake = 100;\n      \n      // EV% = (odds * fairProb - 1) * 100 = (2.5 * 0.5 - 1) * 100 = 25%\n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeCloseTo(25, 1); // Good bet: +25% EV\n      expect(ev.evDollars).toBeCloseTo(25, 1);\n    });\n\n    it('should demonstrate fix: lower odds than fair gives negative EV', () => {\n      // When bookmaker odds are LOWER than fair odds, EV should be NEGATIVE\n      const bookmakerOdds = 1.67; // Implied prob: 60%\n      const fairProbability = 50; // True prob: 50% (lower than implied)\n      const stake = 100;\n      \n      // EV% = (odds * fairProb - 1) * 100 = (1.67 * 0.5 - 1) * 100 = -16.5%\n      const ev = calculateExpectedValue(bookmakerOdds, fairProbability, stake);\n      \n      expect(ev.evPercentage).toBeCloseTo(-16.5, 0); // Bad bet: ~-16.5% EV\n      expect(ev.evDollars).toBeCloseTo(-16.5, 0);\n    });\n  });\n\n  describe('findBestArbitrage with EV', () => {\n    it('should include EV calculations when sufficient bookmakers exist', () => {\n      const event: OddsApiEvent = {\n        id: 'test_ev_event_1',\n        sport_key: 'basketball_nba',\n        sport_title: 'Basketball - NBA',\n        commence_time: new Date().toISOString(),\n        home_team: 'Lakers',\n        away_team: 'Warriors',\n        bookmakers: [\n          {\n            key: 'bet365',\n            title: 'Bet365',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.10 },\n                { name: 'Warriors', price: 2.00 },\n              ]\n            }]\n          },\n          {\n            key: 'draftkings',\n            title: 'DraftKings',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.05 },\n                { name: 'Warriors', price: 2.10 },\n              ]\n            }]\n          },\n          {\n            key: 'fanduel',\n            title: 'FanDuel',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.08 },\n                { name: 'Warriors', price: 2.05 },\n              ]\n            }]\n          },\n        ]\n      };\n\n      const opportunity = findBestArbitrage(event, 'h2h');\n      \n      expect(opportunity).not.toBeNull();\n      expect(opportunity!.bookmakers[0].ev).toBeDefined();\n      expect(opportunity!.bookmakers[0].evDollars).toBeDefined();\n      expect(opportunity!.bookmakers[1].ev).toBeDefined();\n      expect(opportunity!.bookmakers[1].evDollars).toBeDefined();\n    });\n\n    it('should not include EV when insufficient bookmakers', () => {\n      const event: OddsApiEvent = {\n        id: 'test_ev_event_2',\n        sport_key: 'basketball_nba',\n        sport_title: 'Basketball - NBA',\n        commence_time: new Date().toISOString(),\n        home_team: 'Lakers',\n        away_team: 'Warriors',\n        bookmakers: [\n          {\n            key: 'bet365',\n            title: 'Bet365',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.10 },\n                { name: 'Warriors', price: 2.00 },\n              ]\n            }]\n          },\n          {\n            key: 'draftkings',\n            title: 'DraftKings',\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: 'h2h',\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: 'Lakers', price: 2.05 },\n                { name: 'Warriors', price: 2.10 },\n              ]\n            }]\n          },\n        ]\n      };\n\n      const opportunity = findBestArbitrage(event, 'h2h');\n      \n      expect(opportunity).not.toBeNull();\n      expect(opportunity!.bookmakers[0].ev).toBeUndefined();\n      expect(opportunity!.bookmakers[0].evDollars).toBeUndefined();\n    });\n  });\n\n  describe('findPositiveEVOpportunities', () => {\n    it('should find positive EV opportunities', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'ev_event_1',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.00 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.90 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n            {\n              key: 'fanduel',\n              title: 'FanDuel',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.95 },\n                  { name: 'Warriors', price: 2.05 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const opportunities = findPositiveEVOpportunities(events);\n      \n      expect(opportunities.length).toBeGreaterThan(0);\n      \n      // All opportunities should have EV data\n      opportunities.forEach(opp => {\n        opp.bookmakers.forEach(bm => {\n          expect(bm.ev).toBeDefined();\n          expect(bm.evDollars).toBeDefined();\n        });\n      });\n    });\n\n    it('should filter by minimum EV percentage', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'ev_event_2',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.00 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.90 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n            {\n              key: 'fanduel',\n              title: 'FanDuel',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.95 },\n                  { name: 'Warriors', price: 2.05 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const allOpportunities = findPositiveEVOpportunities(events, 0);\n      const filteredOpportunities = findPositiveEVOpportunities(events, 5);\n      \n      expect(filteredOpportunities.length).toBeLessThanOrEqual(allOpportunities.length);\n      \n      filteredOpportunities.forEach(opp => {\n        opp.bookmakers.forEach(bm => {\n          if (bm.ev !== undefined) {\n            expect(bm.ev).toBeGreaterThanOrEqual(5);\n          }\n        });\n      });\n    });\n\n    it('should skip events with insufficient bookmakers', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'ev_event_3',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.00 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.90 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const opportunities = findPositiveEVOpportunities(events);\n      \n      expect(opportunities.length).toBe(0); // Should skip due to insufficient bookmakers\n    });\n\n    it('should sort by highest EV', () => {\n      const events: OddsApiEvent[] = [\n        {\n          id: 'ev_event_4',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Lakers',\n          away_team: 'Warriors',\n          bookmakers: [\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 2.00 },\n                  { name: 'Warriors', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.90 },\n                  { name: 'Warriors', price: 2.10 },\n                ]\n              }]\n            },\n            {\n              key: 'fanduel',\n              title: 'FanDuel',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Lakers', price: 1.95 },\n                  { name: 'Warriors', price: 2.05 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const opportunities = findPositiveEVOpportunities(events);\n      \n      // Verify sorting by EV (descending)\n      for (let i = 1; i < opportunities.length; i++) {\n        const maxEVPrev = Math.max(...opportunities[i - 1].bookmakers.map(bm => bm.ev || 0));\n        const maxEVCurrent = Math.max(...opportunities[i].bookmakers.map(bm => bm.ev || 0));\n        expect(maxEVPrev).toBeGreaterThanOrEqual(maxEVCurrent);\n      }\n    });\n\n    it('should correctly identify positive EV bets after fix', () => {\n      // This test verifies the EV formula fix\n      // When a bookmaker offers HIGHER odds than the fair market,\n      // that represents a positive EV opportunity\n      const events: OddsApiEvent[] = [\n        {\n          id: 'ev_fix_test',\n          sport_key: 'basketball_nba',\n          sport_title: 'Basketball - NBA',\n          commence_time: new Date().toISOString(),\n          home_team: 'Team A',\n          away_team: 'Team B',\n          bookmakers: [\n            // Fair market is around 2.0 for both outcomes (50% probability each)\n            {\n              key: 'bet365',\n              title: 'Bet365',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Team A', price: 2.00 },\n                  { name: 'Team B', price: 2.00 },\n                ]\n              }]\n            },\n            {\n              key: 'draftkings',\n              title: 'DraftKings',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  { name: 'Team A', price: 2.05 },\n                  { name: 'Team B', price: 1.95 },\n                ]\n              }]\n            },\n            {\n              key: 'fanduel',\n              title: 'FanDuel',\n              last_update: new Date().toISOString(),\n              markets: [{\n                key: 'h2h',\n                last_update: new Date().toISOString(),\n                outcomes: [\n                  // This bookmaker offers 2.20 for Team A - HIGHER than fair (2.0)\n                  // This should be a positive EV bet\n                  { name: 'Team A', price: 2.20 },\n                  { name: 'Team B', price: 1.80 },\n                ]\n              }]\n            },\n          ]\n        },\n      ];\n\n      const opportunities = findPositiveEVOpportunities(events, 0);\n      \n      expect(opportunities.length).toBeGreaterThan(0);\n      \n      // Find the FanDuel Team A bet (odds 2.20)\n      const fanDuelTeamABet = opportunities[0].bookmakers.find(\n        bm => bm.name === 'FanDuel' && bm.outcome === 'Team A'\n      );\n      \n      expect(fanDuelTeamABet).toBeDefined();\n      expect(fanDuelTeamABet!.odds).toBe(2.20);\n      expect(fanDuelTeamABet!.ev).toBeGreaterThan(0); // Should be positive EV\n      \n      // Fair price for Team A is average of [2.00, 2.05, 2.20] = 48.97% implied prob\n      // FanDuel offers 2.20 (45.45% implied prob)\n      // EV = ((0.4897 - 0.4545) / 0.4545) * 100 â‰ˆ 7.74%\n      expect(fanDuelTeamABet!.ev).toBeCloseTo(7.74, 0);\n    });\n  });\n});\n","size_bytes":31299},"server/arbitrage-engine.ts":{"content":"import type { ArbitrageOpportunity, OddsApiEvent } from \"@shared/schema\";\n\n// ============================================================================\n// ADVANCED ARBITRAGE CALCULATION ENGINE\n// ============================================================================\n\ninterface ArbitrageCalculation {\n  hasArbitrage: boolean;\n  profitPercentage: number;\n  stakes: number[];\n  impliedProbabilities: number[];\n  totalImpliedProbability: number;\n}\n\ninterface BookmakerBet {\n  bookmaker: string;\n  outcome: string;\n  odds: number;\n}\n\n/**\n * Calculate implied probability from decimal odds\n * Formula: 1 / odds * 100\n */\nexport function calculateImpliedProbability(odds: number): number {\n  return (1 / odds) * 100;\n}\n\n/**\n * Calculate arbitrage for any number of outcomes (2-way or 3-way markets)\n * \n * @param bets - Array of bookmaker bets with odds\n * @param totalStake - Total amount to invest (default: 1000)\n * @returns Arbitrage calculation result\n */\nexport function calculateArbitrage(\n  bets: BookmakerBet[],\n  totalStake: number = 1000\n): ArbitrageCalculation {\n  // Calculate implied probabilities\n  const impliedProbabilities = bets.map(bet => calculateImpliedProbability(bet.odds));\n  \n  // Calculate total implied probability (arbitrage exists if < 100%)\n  const totalImpliedProbability = impliedProbabilities.reduce((sum, prob) => sum + prob, 0);\n  \n  const hasArbitrage = totalImpliedProbability < 100;\n  \n  // Calculate profit percentage\n  // Formula: (1 / total_implied_probability - 1) * 100\n  const profitPercentage = hasArbitrage \n    ? ((1 / (totalImpliedProbability / 100)) - 1) * 100\n    : 0;\n  \n  // Calculate optimal stakes for equal profit across all outcomes\n  // Formula: stake_i = (total_stake * implied_prob_i) / total_implied_prob\n  const stakes = impliedProbabilities.map(prob => \n    (totalStake * (prob / 100)) / (totalImpliedProbability / 100)\n  );\n  \n  return {\n    hasArbitrage,\n    profitPercentage: Math.round(profitPercentage * 100) / 100,\n    stakes: stakes.map(s => Math.round(s * 100) / 100),\n    impliedProbabilities: impliedProbabilities.map(p => Math.round(p * 100) / 100),\n    totalImpliedProbability: Math.round(totalImpliedProbability * 100) / 100,\n  };\n}\n\n/**\n * Kelly Criterion for optimal stake sizing\n * Formula: f* = (bp - q) / b\n * where:\n *   f* = fraction of bankroll to bet\n *   b = odds - 1 (net odds)\n *   p = probability of winning\n *   q = probability of losing (1 - p)\n * \n * For arbitrage, we use a conservative fractional Kelly (e.g., 0.25 or 0.5)\n */\nexport function calculateKellyStake(\n  odds: number,\n  trueProbability: number,\n  bankroll: number,\n  kellyFraction: number = 0.5\n): number {\n  const b = odds - 1;\n  const p = trueProbability / 100;\n  const q = 1 - p;\n  \n  const kellyPercentage = (b * p - q) / b;\n  const conservativeKelly = Math.max(0, kellyPercentage * kellyFraction);\n  \n  return Math.round(bankroll * conservativeKelly * 100) / 100;\n}\n\n/**\n * Calculate fair market price (true odds) for an outcome by aggregating all bookmaker odds\n * Uses the average of implied probabilities across all bookmakers\n * \n * @param oddsArray - Array of odds from different bookmakers for the same outcome\n * @param minBookmakers - Minimum number of bookmakers required (default: 3)\n * @returns Fair probability as a percentage, or null if insufficient data\n */\nexport function calculateFairMarketPrice(\n  oddsArray: number[],\n  minBookmakers: number = 3\n): number | null {\n  if (oddsArray.length < minBookmakers) {\n    return null;\n  }\n\n  // Calculate implied probability for each bookmaker's odds\n  const impliedProbabilities = oddsArray.map(odds => calculateImpliedProbability(odds));\n  \n  // Average the implied probabilities to get fair probability\n  const fairProbability = impliedProbabilities.reduce((sum, prob) => sum + prob, 0) / impliedProbabilities.length;\n  \n  return Math.round(fairProbability * 100) / 100;\n}\n\n/**\n * Calculate Expected Value (EV) for a bet\n * \n * Formula: EV% = ((fairProb - impliedProb) / impliedProb) * 100\n * Or equivalently: EV% = (odds * fairProb - 1) * 100\n * \n * When odds are BETTER than fair (higher odds = lower implied prob), EV is POSITIVE\n * When odds are WORSE than fair (lower odds = higher implied prob), EV is NEGATIVE\n * \n * @param bookmakerOdds - The odds offered by a specific bookmaker\n * @param fairProbability - The fair market probability (as percentage)\n * @param stake - The stake amount for calculating EV in dollars\n * @returns Object with EV percentage and EV in dollars\n */\nexport function calculateExpectedValue(\n  bookmakerOdds: number,\n  fairProbability: number,\n  stake: number = 100\n): { evPercentage: number; evDollars: number } {\n  // Convert fair probability from percentage to decimal\n  const fairProb = fairProbability / 100;\n  \n  // Calculate implied probability from bookmaker odds\n  const impliedProb = 1 / bookmakerOdds;\n  \n  // Calculate EV percentage using the correct formula\n  // EV% = ((fairProb - impliedProb) / impliedProb) * 100\n  // Which is equivalent to: (odds * fairProb - 1) * 100\n  const evPercentage = ((fairProb - impliedProb) / impliedProb) * 100;\n  \n  // Calculate EV in dollars\n  const evDollars = stake * (evPercentage / 100);\n  \n  return {\n    evPercentage: Math.round(evPercentage * 100) / 100,\n    evDollars: Math.round(evDollars * 100) / 100,\n  };\n}\n\n/**\n * Get all odds for a specific outcome across all bookmakers\n */\nfunction getAllOddsForOutcome(\n  event: OddsApiEvent,\n  outcome: string,\n  marketKey: string\n): number[] {\n  const odds: number[] = [];\n  \n  for (const bookmaker of event.bookmakers) {\n    const market = bookmaker.markets.find(m => m.key === marketKey);\n    if (!market) continue;\n    \n    const outcomeData = market.outcomes.find(o => o.name === outcome);\n    if (outcomeData) {\n      odds.push(outcomeData.price);\n    }\n  }\n  \n  return odds;\n}\n\n/**\n * Find best arbitrage opportunities from odds data for a single event\n */\nexport function findBestArbitrage(\n  event: OddsApiEvent,\n  marketKey: string = \"h2h\"\n): ArbitrageOpportunity | null {\n  const market = event.bookmakers[0]?.markets.find(m => m.key === marketKey);\n  if (!market) return null;\n\n  const outcomes = market.outcomes.map(o => o.name);\n  \n  // Find best odds for each outcome across all bookmakers\n  const bestOddsPerOutcome = outcomes.map(outcome => {\n    let bestOdds = 0;\n    let bestBookmaker = \"\";\n    \n    for (const bookmaker of event.bookmakers) {\n      const market = bookmaker.markets.find(m => m.key === marketKey);\n      if (!market) continue;\n      \n      const outcomeData = market.outcomes.find(o => o.name === outcome);\n      if (outcomeData && outcomeData.price > bestOdds) {\n        bestOdds = outcomeData.price;\n        bestBookmaker = bookmaker.title;\n      }\n    }\n    \n    return {\n      bookmaker: bestBookmaker,\n      outcome,\n      odds: bestOdds,\n    };\n  }).filter(bet => bet.odds > 0);\n\n  if (bestOddsPerOutcome.length < 2) return null;\n\n  // Calculate arbitrage\n  const arbitrageCalc = calculateArbitrage(bestOddsPerOutcome);\n  \n  if (!arbitrageCalc.hasArbitrage) return null;\n\n  // Calculate fair market prices for each outcome\n  const fairPrices = outcomes.map(outcome => {\n    const allOdds = getAllOddsForOutcome(event, outcome, marketKey);\n    return calculateFairMarketPrice(allOdds);\n  });\n\n  // Build arbitrage opportunity with EV calculations\n  const opportunity: ArbitrageOpportunity = {\n    id: `${event.id}-${marketKey}-${Date.now()}`,\n    sport: event.sport_title,\n    match: `${event.home_team} vs ${event.away_team}`,\n    bookmakers: bestOddsPerOutcome.map((bet, idx) => {\n      const fairPrice = fairPrices[idx];\n      let ev: number | undefined;\n      let evDollars: number | undefined;\n\n      // Calculate EV if we have a fair price (requires minimum 3 bookmakers)\n      if (fairPrice !== null) {\n        const evCalc = calculateExpectedValue(bet.odds, fairPrice, arbitrageCalc.stakes[idx]);\n        ev = evCalc.evPercentage;\n        evDollars = evCalc.evDollars;\n      }\n\n      return {\n        name: bet.bookmaker,\n        outcome: bet.outcome,\n        odds: bet.odds,\n        stake: arbitrageCalc.stakes[idx],\n        ev,\n        evDollars,\n      };\n    }),\n    profit: arbitrageCalc.profitPercentage,\n    timestamp: new Date().toISOString(),\n    eventId: event.id,\n    commenceTime: event.commence_time,\n  };\n\n  return opportunity;\n}\n\n/**\n * Find all arbitrage opportunities from multiple events\n */\nexport function findAllArbitrageOpportunities(\n  events: OddsApiEvent[],\n  minProfitPercentage: number = 0\n): ArbitrageOpportunity[] {\n  const opportunities: ArbitrageOpportunity[] = [];\n\n  for (const event of events) {\n    // Check h2h (head-to-head) market\n    const h2hArbitrage = findBestArbitrage(event, \"h2h\");\n    if (h2hArbitrage && h2hArbitrage.profit >= minProfitPercentage) {\n      opportunities.push(h2hArbitrage);\n    }\n  }\n\n  // Sort by profit percentage (highest first)\n  return opportunities.sort((a, b) => b.profit - a.profit);\n}\n\n/**\n * Find positive Expected Value (+EV) opportunities from multiple events\n * Returns bets where the bookmaker odds offer better value than the fair market price\n * \n * @param events - Array of events to analyze\n * @param minEVPercentage - Minimum EV percentage to filter (default: 0)\n * @returns Array of arbitrage opportunities with positive EV bets\n */\nexport function findPositiveEVOpportunities(\n  events: OddsApiEvent[],\n  minEVPercentage: number = 0\n): ArbitrageOpportunity[] {\n  const opportunities: ArbitrageOpportunity[] = [];\n\n  for (const event of events) {\n    const marketKey = \"h2h\";\n    const market = event.bookmakers[0]?.markets.find(m => m.key === marketKey);\n    if (!market) continue;\n\n    const outcomes = market.outcomes.map(o => o.name);\n\n    // Calculate fair prices for each outcome\n    const fairPrices = outcomes.map(outcome => {\n      const allOdds = getAllOddsForOutcome(event, outcome, marketKey);\n      return calculateFairMarketPrice(allOdds);\n    });\n\n    // Check if we have fair prices for all outcomes (need minimum 3 bookmakers)\n    if (fairPrices.some(fp => fp === null)) continue;\n\n    // Find all bets with positive EV for this event\n    const positiveBets: Array<{\n      bookmaker: string;\n      outcome: string;\n      odds: number;\n      ev: number;\n      evDollars: number;\n    }> = [];\n\n    outcomes.forEach((outcome, outcomeIdx) => {\n      const fairPrice = fairPrices[outcomeIdx];\n      if (fairPrice === null) return;\n\n      // Check each bookmaker's odds for this outcome\n      for (const bookmaker of event.bookmakers) {\n        const market = bookmaker.markets.find(m => m.key === marketKey);\n        if (!market) continue;\n\n        const outcomeData = market.outcomes.find(o => o.name === outcome);\n        if (!outcomeData) continue;\n\n        // Calculate EV for this bet\n        const defaultStake = 100; // Use a default stake for EV calculation\n        const evCalc = calculateExpectedValue(outcomeData.price, fairPrice, defaultStake);\n\n        // If EV is positive and meets minimum threshold, add it\n        if (evCalc.evPercentage >= minEVPercentage) {\n          positiveBets.push({\n            bookmaker: bookmaker.title,\n            outcome: outcome,\n            odds: outcomeData.price,\n            ev: evCalc.evPercentage,\n            evDollars: evCalc.evDollars,\n          });\n        }\n      }\n    });\n\n    // Create opportunities from positive EV bets\n    if (positiveBets.length > 0) {\n      // Sort bets by EV percentage (highest first) and take the best ones\n      positiveBets.sort((a, b) => b.ev - a.ev);\n\n      const opportunity: ArbitrageOpportunity = {\n        id: `${event.id}-${marketKey}-ev-${Date.now()}`,\n        sport: event.sport_title,\n        match: `${event.home_team} vs ${event.away_team}`,\n        bookmakers: positiveBets.map(bet => ({\n          name: bet.bookmaker,\n          outcome: bet.outcome,\n          odds: bet.odds,\n          stake: 100, // Default stake\n          ev: bet.ev,\n          evDollars: bet.evDollars,\n        })),\n        profit: 0, // +EV bets don't have guaranteed profit like arbitrage\n        timestamp: new Date().toISOString(),\n        eventId: event.id,\n        commenceTime: event.commence_time,\n      };\n\n      opportunities.push(opportunity);\n    }\n  }\n\n  // Sort by highest EV percentage\n  return opportunities.sort((a, b) => {\n    const maxEVA = Math.max(...a.bookmakers.map(bm => bm.ev || 0));\n    const maxEVB = Math.max(...b.bookmakers.map(bm => bm.ev || 0));\n    return maxEVB - maxEVA;\n  });\n}\n\n/**\n * Validate arbitrage calculation (for testing)\n * Ensures that all outcomes yield the same profit\n */\nexport function validateArbitrage(opportunity: ArbitrageOpportunity): boolean {\n  const totalStake = opportunity.bookmakers.reduce((sum, b) => sum + b.stake, 0);\n  \n  const profits = opportunity.bookmakers.map(b => {\n    const payout = b.stake * b.odds;\n    return payout - totalStake;\n  });\n  \n  // All profits should be approximately equal (within 0.01% tolerance)\n  const firstProfit = profits[0];\n  return profits.every(p => Math.abs(p - firstProfit) < 0.01);\n}\n","size_bytes":13059},"server/odds-provider.ts":{"content":"import type { OddsApiEvent, Sport } from \"@shared/schema\";\nimport { oddsApiEventSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// ODDS PROVIDER INTERFACE & IMPLEMENTATIONS\n// ============================================================================\n\nexport interface OddsResult {\n  events: OddsApiEvent[];\n  isFromCache: boolean;\n  cacheAge?: number; // Age in minutes\n}\n\nexport interface OddsProvider {\n  fetchOdds(sports: Sport[], regions?: string[], markets?: string[]): Promise<OddsResult>;\n  getName(): string;\n}\n\n// ============================================================================\n// IN-MEMORY CACHE WITH TTL\n// ============================================================================\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n}\n\ninterface PersistentCacheEntry<T> {\n  data: T;\n  timestamp: number;\n  isFallback: boolean;\n}\n\nclass InMemoryCache {\n  private cache: Map<string, CacheEntry<any>> = new Map();\n  private persistentCache: Map<string, PersistentCacheEntry<any>> = new Map();\n\n  set<T>(key: string, data: T, ttlSeconds: number = 60): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlSeconds * 1000,\n    });\n    \n    // Also save to persistent cache for fallback\n    this.persistentCache.set(key, {\n      data,\n      timestamp: Date.now(),\n      isFallback: false,\n    });\n  }\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) return null;\n    \n    const isExpired = Date.now() - entry.timestamp > entry.ttl;\n    \n    if (isExpired) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry.data as T;\n  }\n\n  getFallback<T>(key: string): { data: T; timestamp: number } | null {\n    const entry = this.persistentCache.get(key);\n    if (!entry) return null;\n    \n    return {\n      data: entry.data as T,\n      timestamp: entry.timestamp,\n    };\n  }\n\n  has(key: string): boolean {\n    return this.get(key) !== null;\n  }\n\n  hasFallback(key: string): boolean {\n    return this.persistentCache.has(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  clearAll(): void {\n    this.cache.clear();\n    this.persistentCache.clear();\n  }\n\n  getStats() {\n    let totalEntries = 0;\n    let expiredEntries = 0;\n    \n    for (const [key, entry] of Array.from(this.cache.entries())) {\n      totalEntries++;\n      if (Date.now() - entry.timestamp > entry.ttl) {\n        expiredEntries++;\n      }\n    }\n    \n    return {\n      totalEntries,\n      activeEntries: totalEntries - expiredEntries,\n      expiredEntries,\n      persistentEntries: this.persistentCache.size,\n    };\n  }\n}\n\nexport const oddsCache = new InMemoryCache();\n\n// ============================================================================\n// THE ODDS API PROVIDER\n// ============================================================================\n\nexport class TheOddsApiProvider implements OddsProvider {\n  private apiKey: string;\n  private baseUrl: string = \"https://api.the-odds-api.com/v4\";\n  private cacheTtl: number = 60; // seconds\n\n  constructor(apiKey: string, cacheTtl: number = 60) {\n    this.apiKey = apiKey;\n    this.cacheTtl = cacheTtl;\n  }\n\n  getName(): string {\n    return \"The Odds API\";\n  }\n\n  private getCacheKey(sports: Sport[], regions: string[], markets: string[]): string {\n    return `odds:${sports.join(',')}:${regions.join(',')}:${markets.join(',')}`;\n  }\n\n  async fetchOdds(\n    sports: Sport[],\n    regions: string[] = [\"us\", \"uk\", \"eu\"],\n    markets: string[] = [\"h2h\"]\n  ): Promise<OddsResult> {\n    const cacheKey = this.getCacheKey(sports, regions, markets);\n    \n    // Check cache first\n    const cached = oddsCache.get<OddsApiEvent[]>(cacheKey);\n    if (cached) {\n      console.log(`[OddsAPI] Cache hit for key: ${cacheKey}`);\n      return {\n        events: cached,\n        isFromCache: false, // This is fresh cache, not fallback\n        cacheAge: 0,\n      };\n    }\n\n    console.log(`[OddsAPI] Fetching fresh data for sports: ${sports.join(', ')}`);\n\n    try {\n      // Fetch odds for each sport in parallel\n      const promises = sports.map(sport => this.fetchSportOdds(sport, regions, markets));\n      const results = await Promise.all(promises);\n      \n      // Flatten results\n      const allEvents = results.flat();\n      \n      // Validate with Zod\n      const validatedEvents = z.array(oddsApiEventSchema).parse(allEvents);\n      \n      // Cache the results (both TTL and persistent)\n      oddsCache.set(cacheKey, validatedEvents, this.cacheTtl);\n      \n      console.log(`[OddsAPI] Fetched ${validatedEvents.length} events, cached for ${this.cacheTtl}s`);\n      \n      return {\n        events: validatedEvents,\n        isFromCache: false,\n        cacheAge: 0,\n      };\n    } catch (error) {\n      console.error(\"[OddsAPI] Error fetching odds:\", error);\n      \n      // Try to fall back to cached data\n      const fallback = oddsCache.getFallback<OddsApiEvent[]>(cacheKey);\n      if (fallback) {\n        const ageMinutes = Math.floor((Date.now() - fallback.timestamp) / 60000);\n        console.log(`[OddsAPI] Using cached fallback data (${ageMinutes}m old)`);\n        return {\n          events: fallback.data,\n          isFromCache: true,\n          cacheAge: ageMinutes,\n        };\n      }\n      \n      throw new Error(`Failed to fetch odds: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async fetchSportOdds(\n    sport: Sport,\n    regions: string[],\n    markets: string[]\n  ): Promise<OddsApiEvent[]> {\n    const params = new URLSearchParams({\n      apiKey: this.apiKey,\n      regions: regions.join(','),\n      markets: markets.join(','),\n      oddsFormat: 'decimal',\n    });\n\n    const url = `${this.baseUrl}/sports/${sport}/odds?${params.toString()}`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return Array.isArray(data) ? data : [];\n  }\n}\n\n// ============================================================================\n// MOCK DATA PROVIDER\n// ============================================================================\n\nexport class MockOddsProvider implements OddsProvider {\n  getName(): string {\n    return \"Mock Provider\";\n  }\n\n  async fetchOdds(sports: Sport[]): Promise<OddsResult> {\n    console.log(`[MockProvider] Generating mock data for sports: ${sports.join(', ')}`);\n    \n    const mockEvents: OddsApiEvent[] = [\n      // Soccer - Premier League\n      {\n        id: \"mock_soccer_1\",\n        sport_key: \"soccer_epl\",\n        sport_title: \"Soccer - EPL\",\n        commence_time: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),\n        home_team: \"Manchester City\",\n        away_team: \"Arsenal\",\n        bookmakers: [\n          {\n            key: \"bet365\",\n            title: \"Bet365\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Manchester City\", price: 2.10 },\n                { name: \"Arsenal\", price: 3.50 },\n                { name: \"Draw\", price: 3.40 },\n              ]\n            }]\n          },\n          {\n            key: \"draftkings\",\n            title: \"DraftKings\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Manchester City\", price: 2.05 },\n                { name: \"Arsenal\", price: 3.60 },\n                { name: \"Draw\", price: 3.50 },\n              ]\n            }]\n          },\n          {\n            key: \"fanduel\",\n            title: \"FanDuel\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Manchester City\", price: 2.15 },\n                { name: \"Arsenal\", price: 3.40 },\n                { name: \"Draw\", price: 3.60 },\n              ]\n            }]\n          },\n        ]\n      },\n      // Basketball - NBA\n      {\n        id: \"mock_basketball_1\",\n        sport_key: \"basketball_nba\",\n        sport_title: \"Basketball - NBA\",\n        commence_time: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString(),\n        home_team: \"Los Angeles Lakers\",\n        away_team: \"Golden State Warriors\",\n        bookmakers: [\n          {\n            key: \"betmgm\",\n            title: \"BetMGM\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Los Angeles Lakers\", price: 1.95 },\n                { name: \"Golden State Warriors\", price: 2.05 },\n              ]\n            }]\n          },\n          {\n            key: \"caesars\",\n            title: \"Caesars\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Los Angeles Lakers\", price: 1.90 },\n                { name: \"Golden State Warriors\", price: 2.10 },\n              ]\n            }]\n          },\n        ]\n      },\n      // Tennis - ATP\n      {\n        id: \"mock_tennis_1\",\n        sport_key: \"tennis_atp\",\n        sport_title: \"Tennis - ATP\",\n        commence_time: new Date(Date.now() + 6 * 60 * 60 * 1000).toISOString(),\n        home_team: \"Novak Djokovic\",\n        away_team: \"Carlos Alcaraz\",\n        bookmakers: [\n          {\n            key: \"pointsbet\",\n            title: \"PointsBet\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Novak Djokovic\", price: 2.25 },\n                { name: \"Carlos Alcaraz\", price: 1.75 },\n              ]\n            }]\n          },\n          {\n            key: \"fanduel\",\n            title: \"FanDuel\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Novak Djokovic\", price: 2.30 },\n                { name: \"Carlos Alcaraz\", price: 1.70 },\n              ]\n            }]\n          },\n        ]\n      },\n      // More profitable arbitrage opportunity - Real Madrid vs Barcelona\n      {\n        id: \"mock_soccer_2\",\n        sport_key: \"soccer_spain_la_liga\",\n        sport_title: \"Soccer - La Liga\",\n        commence_time: new Date(Date.now() + 8 * 60 * 60 * 1000).toISOString(),\n        home_team: \"Real Madrid\",\n        away_team: \"Barcelona\",\n        bookmakers: [\n          {\n            key: \"draftkings\",\n            title: \"DraftKings\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Real Madrid\", price: 2.40 },\n                { name: \"Barcelona\", price: 2.90 },\n                { name: \"Draw\", price: 3.50 },\n              ]\n            }]\n          },\n          {\n            key: \"bet365\",\n            title: \"Bet365\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Real Madrid\", price: 2.35 },\n                { name: \"Barcelona\", price: 3.00 },\n                { name: \"Draw\", price: 3.45 },\n              ]\n            }]\n          },\n          {\n            key: \"betmgm\",\n            title: \"BetMGM\",\n            last_update: new Date().toISOString(),\n            markets: [{\n              key: \"h2h\",\n              last_update: new Date().toISOString(),\n              outcomes: [\n                { name: \"Real Madrid\", price: 2.38 },\n                { name: \"Barcelona\", price: 2.95 },\n                { name: \"Draw\", price: 3.60 },\n              ]\n            }]\n          },\n        ]\n      },\n    ];\n\n    // Filter by requested sports if specific ones are requested\n    let filteredEvents = mockEvents;\n    if (sports.length > 0 && !sports.includes(\"soccer_epl\" as Sport)) {\n      filteredEvents = mockEvents.filter(event => sports.includes(event.sport_key as Sport));\n    }\n\n    return {\n      events: filteredEvents,\n      isFromCache: false,\n      cacheAge: 0,\n    };\n  }\n}\n\n// ============================================================================\n// PROVIDER FACTORY\n// ============================================================================\n\nexport function createOddsProvider(apiKey?: string, mockMode: boolean = false): OddsProvider {\n  if (mockMode) {\n    console.log(\"[ProviderFactory] Using Mock Provider\");\n    return new MockOddsProvider();\n  }\n  \n  if (!apiKey) {\n    console.log(\"[ProviderFactory] No API key provided, using Mock Provider\");\n    return new MockOddsProvider();\n  }\n  \n  console.log(\"[ProviderFactory] Using The Odds API Provider\");\n  return new TheOddsApiProvider(apiKey, 60);\n}\n","size_bytes":13351},"client/src/components/CacheIndicator.tsx":{"content":"import { Database } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface CacheIndicatorProps {\n  isFromCache?: boolean;\n  cacheAge?: number;\n}\n\nexport default function CacheIndicator({ isFromCache, cacheAge }: CacheIndicatorProps) {\n  if (!isFromCache) return null;\n\n  const ageText = cacheAge\n    ? cacheAge < 60\n      ? `${cacheAge}m old`\n      : `${Math.floor(cacheAge / 60)}h old`\n    : \"cached\";\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className=\"gap-1.5 !h-11 bg-amber-500/10 border-amber-500/20 text-amber-700 dark:text-amber-400\"\n      data-testid=\"badge-cache-indicator\"\n      aria-label={`Using cached data from ${ageText}`}\n    >\n      <Database className=\"h-3.5 w-3.5\" aria-hidden=\"true\" />\n      <span>Cached data ({ageText})</span>\n    </Badge>\n  );\n}\n","size_bytes":805},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { \n  TrendingUp, \n  Trophy, \n  Circle, \n  CircleDot,\n  Shield,\n  Snowflake,\n  Dumbbell,\n  Settings,\n  X,\n  Sparkles,\n  ChevronRight,\n  Percent\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport type { BookmakerWithCount } from \"@/components/FilterBar\";\n\nconst SPORTS = [\n  { value: \"all\", label: \"All Sports\", Icon: Trophy, description: \"All available sports\" },\n  { value: \"soccer\", label: \"Soccer\", Icon: Circle, description: \"Football matches\" },\n  { value: \"basketball\", label: \"Basketball\", Icon: CircleDot, description: \"NBA & more\" },\n  { value: \"football\", label: \"Football\", Icon: Shield, description: \"NFL & NCAA\" },\n  { value: \"baseball\", label: \"Baseball\", Icon: Circle, description: \"MLB games\" },\n  { value: \"hockey\", label: \"Hockey\", Icon: Snowflake, description: \"NHL matches\" },\n  { value: \"mma\", label: \"MMA\", Icon: Dumbbell, description: \"UFC & more\" },\n];\n\ninterface AppSidebarProps {\n  selectedSport: string;\n  selectedBookmakers: string[];\n  minProfit: number;\n  availableBookmakers: BookmakerWithCount[];\n  onSportChange: (sport: string) => void;\n  onBookmakerToggle: (bookmaker: string) => void;\n  onMinProfitChange: (profit: number) => void;\n  onClearFilters: () => void;\n  onSettingsClick: () => void;\n}\n\nexport function AppSidebar({\n  selectedSport,\n  selectedBookmakers,\n  minProfit,\n  availableBookmakers = [],\n  onSportChange,\n  onBookmakerToggle,\n  onMinProfitChange,\n  onClearFilters,\n  onSettingsClick,\n}: AppSidebarProps) {\n  const hasFilters = selectedSport !== \"all\" || selectedBookmakers.length > 0 || minProfit > 0;\n  const activeFiltersCount = (selectedSport !== \"all\" ? 1 : 0) + selectedBookmakers.length + (minProfit > 0 ? 1 : 0);\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\" className=\"border-r\">\n      <SidebarHeader className=\"border-b border-sidebar-border p-6\">\n        <div className=\"flex items-center gap-4\">\n          <div className={cn(\n            \"relative bg-gradient-to-br from-primary to-primary/80 p-3 rounded-xl\",\n            \"shadow-lg shadow-primary/20 transition-transform hover:scale-105\"\n          )}>\n            <TrendingUp className=\"h-6 w-6 text-primary-foreground\" />\n            <Sparkles className=\"absolute -top-1 -right-1 h-3.5 w-3.5 text-primary-foreground animate-pulse\" />\n          </div>\n          <div className=\"flex-1\">\n            <h2 className=\"text-xl font-bold text-sidebar-foreground tracking-tight\" data-testid=\"text-sidebar-title\">\n              DELLTA\n            </h2>\n            <p className=\"text-sm text-muted-foreground font-medium\">Arbitrage Scanner</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent className=\"px-4 py-6 space-y-8\">\n        {/* Sport Category Section */}\n        <SidebarGroup>\n          <div className=\"flex items-center justify-between px-2 pb-4\">\n            <SidebarGroupLabel className=\"text-xs uppercase tracking-widest text-muted-foreground font-bold flex items-center gap-2\">\n              <Trophy className=\"h-3.5 w-3.5\" />\n              Sport Category\n            </SidebarGroupLabel>\n            {selectedSport !== \"all\" && (\n              <Badge variant=\"secondary\" className=\"text-[10px] h-5 px-1.5\">\n                1\n              </Badge>\n            )}\n          </div>\n          <SidebarGroupContent>\n            <SidebarMenu className=\"space-y-1\">\n              {SPORTS.map((sport) => {\n                const isActive = selectedSport === sport.value;\n                return (\n                  <SidebarMenuItem key={sport.value}>\n                    <SidebarMenuButton\n                      onClick={() => onSportChange(sport.value)}\n                      isActive={isActive}\n                      data-testid={`button-sport-${sport.value}`}\n                      className={cn(\n                        \"gap-3 h-11 px-3 rounded-lg font-medium transition-all\",\n                        isActive && \"bg-primary/10 text-primary hover:bg-primary/15\"\n                      )}\n                      tooltip={sport.description}\n                    >\n                      <sport.Icon className={cn(\n                        \"h-4.5 w-4.5 transition-colors\",\n                        isActive ? \"text-primary\" : \"text-muted-foreground\"\n                      )} />\n                      <span className=\"flex-1 text-sm\">{sport.label}</span>\n                      {isActive && <ChevronRight className=\"h-4 w-4 text-primary\" />}\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <Separator />\n\n        {/* Min Profit Section */}\n        <SidebarGroup>\n          <div className=\"flex items-center justify-between px-2 pb-4\">\n            <SidebarGroupLabel className=\"text-xs uppercase tracking-widest text-muted-foreground font-bold flex items-center gap-2\">\n              <Percent className=\"h-3.5 w-3.5\" />\n              Min Profit\n            </SidebarGroupLabel>\n            <Badge \n              variant={minProfit > 0 ? \"default\" : \"outline\"} \n              className={cn(\n                \"text-xs h-6 px-2 font-bold tabular-nums\",\n                minProfit > 0 && \"bg-primary/15 text-primary border-primary/30\"\n              )}\n              data-testid=\"badge-min-profit\"\n            >\n              {minProfit.toFixed(1)}%\n            </Badge>\n          </div>\n          <SidebarGroupContent className=\"px-2 space-y-4\">\n            <Slider\n              value={[minProfit]}\n              onValueChange={(value) => onMinProfitChange(value[0])}\n              max={10}\n              step={0.1}\n              className=\"w-full\"\n              data-testid=\"slider-min-profit\"\n            />\n            <div className=\"flex justify-between items-center text-xs text-muted-foreground font-medium px-1\">\n              <span className={cn(minProfit === 0 && \"text-primary font-semibold\")}>0%</span>\n              <span className={cn(minProfit >= 4.5 && minProfit <= 5.5 && \"text-primary font-semibold\")}>5%</span>\n              <span className={cn(minProfit === 10 && \"text-primary font-semibold\")}>10%</span>\n            </div>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Bookmakers Section */}\n        {availableBookmakers.length > 0 && (\n          <>\n            <Separator />\n            <SidebarGroup>\n              <div className=\"flex items-center justify-between px-2 pb-4\">\n                <SidebarGroupLabel className=\"text-xs uppercase tracking-widest text-muted-foreground font-bold flex items-center gap-2\">\n                  <Shield className=\"h-3.5 w-3.5\" />\n                  Bookmakers\n                </SidebarGroupLabel>\n                <div className=\"flex items-center gap-1.5\">\n                  {selectedBookmakers.length > 0 && (\n                    <Badge variant=\"secondary\" className=\"text-[10px] h-5 px-1.5\">\n                      {selectedBookmakers.length}\n                    </Badge>\n                  )}\n                  <Badge variant=\"outline\" className=\"text-[10px] h-5 px-1.5\">\n                    {availableBookmakers.reduce((sum, b) => sum + b.count, 0)}\n                  </Badge>\n                </div>\n              </div>\n              <SidebarGroupContent className=\"px-2\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {availableBookmakers.map(({ name, count }) => {\n                    const isSelected = selectedBookmakers.includes(name);\n                    return (\n                      <Badge\n                        key={name}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        className={cn(\n                          \"cursor-pointer text-xs h-8 px-3 font-medium hover-elevate active-elevate-2 transition-all\",\n                          isSelected && \"bg-primary text-primary-foreground border-primary shadow-sm\"\n                        )}\n                        onClick={() => onBookmakerToggle(name)}\n                        data-testid={`badge-bookmaker-${name.toLowerCase()}`}\n                      >\n                        {name}\n                        <span className={cn(\n                          \"ml-1.5 opacity-70 font-semibold\",\n                          isSelected && \"opacity-90\"\n                        )}>\n                          {count}\n                        </span>\n                      </Badge>\n                    );\n                  })}\n                </div>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </>\n        )}\n\n        {/* Clear Filters */}\n        {hasFilters && (\n          <>\n            <Separator />\n            <SidebarGroup>\n              <SidebarGroupContent className=\"px-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onClearFilters}\n                  className=\"w-full gap-2 h-10 font-medium\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  Clear {activeFiltersCount} Filter{activeFiltersCount !== 1 ? 's' : ''}\n                </Button>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border p-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onSettingsClick}\n          className=\"w-full gap-3 justify-start h-11 font-medium\"\n          data-testid=\"button-sidebar-settings\"\n        >\n          <Settings className=\"h-4.5 w-4.5\" />\n          Settings & API Keys\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":10123},"client/src/components/OpportunitiesTable.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, DollarSign, TrendingUp, Clock, Target } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { ArbitrageOpportunity } from \"@/components/ArbitrageCard\";\n\ninterface OpportunitiesTableProps {\n  opportunities: ArbitrageOpportunity[];\n  onClick?: (opportunity: ArbitrageOpportunity) => void;\n}\n\nexport function OpportunitiesTable({ opportunities, onClick }: OpportunitiesTableProps) {\n  const getProfitLevel = (profit: number) => {\n    if (profit >= 3) return \"high\";\n    if (profit >= 1) return \"medium\";\n    return \"low\";\n  };\n\n  const getProfitColor = (profit: number) => {\n    const level = getProfitLevel(profit);\n    if (level === \"high\") return \"text-emerald-600 dark:text-emerald-400\";\n    if (level === \"medium\") return \"text-amber-600 dark:text-amber-400\";\n    return \"text-muted-foreground\";\n  };\n\n  const getProfitBgColor = (profit: number) => {\n    const level = getProfitLevel(profit);\n    if (level === \"high\") return \"bg-emerald-500/10\";\n    if (level === \"medium\") return \"bg-amber-500/10\";\n    return \"bg-muted/50\";\n  };\n\n  const timeAgo = (timestamp: string) => {\n    const now = new Date();\n    const then = new Date(timestamp);\n    const seconds = Math.floor((now.getTime() - then.getTime()) / 1000);\n    \n    if (seconds < 60) return `${seconds}s ago`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n    return then.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"rounded-lg sm:rounded-xl border-2 border-border bg-card\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-muted/50 hover:bg-muted/50 border-b-2\">\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider h-10 sm:h-12 whitespace-nowrap\">\n              <div className=\"flex items-center gap-1 sm:gap-2\">\n                <Target className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                <span className=\"hidden sm:inline\">Match</span>\n              </div>\n            </TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider whitespace-nowrap\">Sport</TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider whitespace-nowrap\">Bookmakers</TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider text-right whitespace-nowrap\">\n              <div className=\"flex items-center justify-end gap-1 sm:gap-2\">\n                <TrendingUp className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                Profit\n              </div>\n            </TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider text-right whitespace-nowrap\">\n              <div className=\"flex items-center justify-end gap-1 sm:gap-2\">\n                <DollarSign className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                Stake\n              </div>\n            </TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider text-right whitespace-nowrap\">Returns</TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider text-right whitespace-nowrap hidden sm:table-cell\">\n              <div className=\"flex items-center justify-end gap-1 sm:gap-2\">\n                <Clock className=\"h-3 w-3 sm:h-3.5 sm:w-3.5\" />\n                Time\n              </div>\n            </TableHead>\n            <TableHead className=\"font-bold text-[10px] sm:text-xs uppercase tracking-wider text-right whitespace-nowrap\">Action</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n          {opportunities.map((opp) => {\n            const totalStake = opp.bookmakers.reduce((sum, b) => sum + b.stake, 0);\n            const guaranteedProfit = (totalStake * opp.profit) / 100;\n            \n            return (\n              <TableRow \n                key={opp.id} \n                className=\"hover-elevate cursor-pointer transition-all h-14 sm:h-16 border-b\"\n                onClick={() => onClick?.(opp)}\n                data-testid={`row-opportunity-${opp.id}`}\n              >\n                <TableCell className=\"font-bold text-xs sm:text-sm max-w-[120px] sm:max-w-none\" data-testid=\"cell-match\">\n                  <div className=\"truncate\">{opp.match}</div>\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className=\"font-semibold text-[10px] sm:text-xs whitespace-nowrap\">\n                    {opp.sport}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex flex-wrap gap-1 sm:gap-1.5\">\n                    {opp.bookmakers.map((bm, idx) => (\n                      <Badge \n                        key={idx} \n                        variant=\"secondary\" \n                        className=\"text-[10px] sm:text-xs font-medium whitespace-nowrap\"\n                      >\n                        {bm.name}\n                      </Badge>\n                    ))}\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <div className={cn(\n                    \"inline-flex items-center gap-1 sm:gap-1.5 px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg font-bold tabular-nums text-sm sm:text-base whitespace-nowrap\",\n                    getProfitBgColor(opp.profit),\n                    getProfitColor(opp.profit)\n                  )} data-testid=\"cell-profit\">\n                    {opp.profit.toFixed(2)}%\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <span className=\"font-bold tabular-nums text-xs sm:text-sm whitespace-nowrap\" data-testid=\"cell-stake\">\n                    ${totalStake.toFixed(2)}\n                  </span>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <span className={cn(\n                    \"font-bold tabular-nums text-xs sm:text-sm whitespace-nowrap\",\n                    getProfitColor(opp.profit)\n                  )} data-testid=\"cell-returns\">\n                    ${guaranteedProfit.toFixed(2)}\n                  </span>\n                </TableCell>\n                <TableCell className=\"text-right hidden sm:table-cell\">\n                  <span className=\"text-xs text-muted-foreground font-medium tabular-nums whitespace-nowrap\" data-testid=\"cell-time\">\n                    {timeAgo(opp.timestamp)}\n                  </span>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onClick?.(opp);\n                    }}\n                    className=\"gap-1 sm:gap-1.5 font-semibold text-xs sm:text-sm\"\n                    data-testid=\"button-view-details\"\n                  >\n                    <DollarSign className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">View</span>\n                  </Button>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7555},"client/src/components/StatsOverview.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { TrendingUp, DollarSign, Clock, Target, Sparkles, ArrowUpRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsOverviewProps {\n  totalOpportunities: number;\n  avgProfit: number;\n  lastUpdated: string;\n  isLoading?: boolean;\n}\n\nexport function StatsOverview({ \n  totalOpportunities, \n  avgProfit, \n  lastUpdated,\n  isLoading = false \n}: StatsOverviewProps) {\n  const maxPotential = totalOpportunities * 100 * avgProfit / 100;\n  \n  const stats = [\n    {\n      label: \"Total Opportunities\",\n      value: isLoading ? \"--\" : totalOpportunities.toString(),\n      icon: Target,\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      borderColor: \"border-primary/20\",\n      change: totalOpportunities > 0 ? \"Active\" : \"None\",\n      trend: \"up\" as const,\n    },\n    {\n      label: \"Avg Profit\",\n      value: isLoading ? \"--\" : `${avgProfit.toFixed(2)}%`,\n      icon: TrendingUp,\n      color: \"text-success\",\n      bgColor: \"bg-success/10\",\n      borderColor: \"border-success/20\",\n      change: avgProfit > 1 ? \"Good\" : \"Low\",\n      trend: \"up\" as const,\n    },\n    {\n      label: \"Max Potential\",\n      value: isLoading ? \"--\" : `$${maxPotential.toFixed(0)}`,\n      icon: DollarSign,\n      color: \"text-warning\",\n      bgColor: \"bg-warning/10\",\n      borderColor: \"border-warning/20\",\n      change: `On $${(totalOpportunities * 100).toFixed(0)}`,\n      trend: null,\n    },\n    {\n      label: \"Last Update\",\n      value: isLoading ? \"--\" : lastUpdated,\n      icon: Clock,\n      color: \"text-muted-foreground\",\n      bgColor: \"bg-muted/50\",\n      borderColor: \"border-border/50\",\n      change: \"Live data\",\n      trend: null,\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6\">\n      {stats.map((stat, index) => (\n        <Card \n          key={index} \n          className={cn(\n            \"relative overflow-hidden group hover-elevate transition-all duration-300\",\n            \"border-2\", \n            stat.borderColor\n          )} \n          data-testid={`card-stat-${index}`}\n        >\n          {/* Background gradient */}\n          <div className={cn(\n            \"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\",\n            \"bg-gradient-to-br from-transparent to-black/5 dark:to-white/5\"\n          )} />\n          \n          <div className=\"relative p-4 sm:p-5 lg:p-6 space-y-3 sm:space-y-4\">\n            {/* Icon and Label */}\n            <div className=\"flex items-center justify-between\">\n              <div className={cn(\n                \"p-2 sm:p-2.5 lg:p-3 rounded-lg sm:rounded-xl transition-all duration-300\",\n                stat.bgColor,\n                \"group-hover:scale-110\"\n              )}>\n                <stat.icon className={cn(\"h-4 w-4 sm:h-5 sm:w-5\", stat.color)} />\n              </div>\n              {stat.trend && (\n                <ArrowUpRight className={cn(\"h-3.5 w-3.5 sm:h-4 sm:w-4\", stat.color, \"opacity-50\")} />\n              )}\n            </div>\n\n            {/* Label */}\n            <div className=\"space-y-1\">\n              <p className=\"text-[10px] sm:text-xs text-muted-foreground uppercase tracking-wider font-bold\">\n                {stat.label}\n              </p>\n              \n              {/* Value */}\n              <p className={cn(\n                \"text-2xl sm:text-3xl font-bold tracking-tight tabular-nums\",\n                isLoading && \"animate-pulse\",\n                stat.color\n              )} data-testid={`text-stat-value-${index}`}>\n                {stat.value}\n              </p>\n              \n              {/* Change indicator */}\n              <p className=\"text-[10px] sm:text-xs text-muted-foreground font-medium flex items-center gap-1\">\n                {stat.trend && <Sparkles className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />}\n                {stat.change}\n              </p>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4000}},"version":1}